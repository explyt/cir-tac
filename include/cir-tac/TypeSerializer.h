/* Autogenerated by mlir-tblgen; don't manually edit. */
// clang-format off

#pragma once

#include "Util.h"
#include "cir-tac/AttrSerializer.h"
#include "proto/setup.pb.h"
#include "proto/type.pb.h"

#include <clang/CIR/Dialect/IR/CIRTypes.h>
#include <mlir/IR/BuiltinTypes.h>
#include <mlir/IR/Builders.h>

using namespace protocir;

class TypeSerializer {
public:
  TypeSerializer(MLIRModuleID moduleID, TypeCache &typeCache)
  : moduleID(moduleID), typeCache(typeCache), attributeSerializer(moduleID, typeCache) {}

  MLIRType serializeMLIRType(mlir::Type);

  MLIRBFloat16Type serializeMLIRBFloat16Type(mlir::BFloat16Type);
  MLIRComplexType serializeMLIRComplexType(mlir::ComplexType);
  MLIRFloat4E2M1FNType serializeMLIRFloat4E2M1FNType(mlir::Float4E2M1FNType);
  MLIRFloat6E2M3FNType serializeMLIRFloat6E2M3FNType(mlir::Float6E2M3FNType);
  MLIRFloat6E3M2FNType serializeMLIRFloat6E3M2FNType(mlir::Float6E3M2FNType);
  MLIRFloat8E3M4Type serializeMLIRFloat8E3M4Type(mlir::Float8E3M4Type);
  MLIRFloat8E4M3Type serializeMLIRFloat8E4M3Type(mlir::Float8E4M3Type);
  MLIRFloat8E4M3B11FNUZType serializeMLIRFloat8E4M3B11FNUZType(mlir::Float8E4M3B11FNUZType);
  MLIRFloat8E4M3FNType serializeMLIRFloat8E4M3FNType(mlir::Float8E4M3FNType);
  MLIRFloat8E4M3FNUZType serializeMLIRFloat8E4M3FNUZType(mlir::Float8E4M3FNUZType);
  MLIRFloat8E5M2Type serializeMLIRFloat8E5M2Type(mlir::Float8E5M2Type);
  MLIRFloat8E5M2FNUZType serializeMLIRFloat8E5M2FNUZType(mlir::Float8E5M2FNUZType);
  MLIRFloat8E8M0FNUType serializeMLIRFloat8E8M0FNUType(mlir::Float8E8M0FNUType);
  MLIRFloat16Type serializeMLIRFloat16Type(mlir::Float16Type);
  MLIRFloat32Type serializeMLIRFloat32Type(mlir::Float32Type);
  MLIRFloat64Type serializeMLIRFloat64Type(mlir::Float64Type);
  MLIRFloat80Type serializeMLIRFloat80Type(mlir::Float80Type);
  MLIRFloat128Type serializeMLIRFloat128Type(mlir::Float128Type);
  MLIRFloatTF32Type serializeMLIRFloatTF32Type(mlir::FloatTF32Type);
  MLIRFunctionType serializeMLIRFunctionType(mlir::FunctionType);
  MLIRIndexType serializeMLIRIndexType(mlir::IndexType);
  MLIRIntegerType serializeMLIRIntegerType(mlir::IntegerType);
  MLIRMemRefType serializeMLIRMemRefType(mlir::MemRefType);
  MLIRNoneType serializeMLIRNoneType(mlir::NoneType);
  MLIROpaqueType serializeMLIROpaqueType(mlir::OpaqueType);
  MLIRRankedTensorType serializeMLIRRankedTensorType(mlir::RankedTensorType);
  MLIRTupleType serializeMLIRTupleType(mlir::TupleType);
  MLIRUnrankedMemRefType serializeMLIRUnrankedMemRefType(mlir::UnrankedMemRefType);
  MLIRUnrankedTensorType serializeMLIRUnrankedTensorType(mlir::UnrankedTensorType);
  MLIRVectorType serializeMLIRVectorType(mlir::VectorType);
  CIRArrayType serializeCIRArrayType(cir::ArrayType);
  CIRBFloat16Type serializeCIRBFloat16Type(cir::BF16Type);
  CIRBoolType serializeCIRBoolType(cir::BoolType);
  CIRComplexType serializeCIRComplexType(cir::ComplexType);
  CIRDataMemberType serializeCIRDataMemberType(cir::DataMemberType);
  CIRDoubleType serializeCIRDoubleType(cir::DoubleType);
  CIRExceptionType serializeCIRExceptionType(cir::ExceptionInfoType);
  CIRFP16Type serializeCIRFP16Type(cir::FP16Type);
  CIRFP80Type serializeCIRFP80Type(cir::FP80Type);
  CIRFP128Type serializeCIRFP128Type(cir::FP128Type);
  CIRFuncType serializeCIRFuncType(cir::FuncType);
  CIRIntType serializeCIRIntType(cir::IntType);
  CIRLongDoubleType serializeCIRLongDoubleType(cir::LongDoubleType);
  CIRMethodType serializeCIRMethodType(cir::MethodType);
  CIRPointerType serializeCIRPointerType(cir::PointerType);
  CIRSingleType serializeCIRSingleType(cir::SingleType);
  CIRVectorType serializeCIRVectorType(cir::VectorType);
  CIRVoidType serializeCIRVoidType(cir::VoidType);
  CIRStructType serializeCIRStructType(cir::StructType);

private:
  MLIRModuleID moduleID;
  TypeCache &typeCache;
  AttributeSerializer attributeSerializer;
};

// clang-format on
