name: Build

on:
  workflow_call:

jobs:
  get-clangir-id:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Read JSON
        id: set-matrix
        run: echo "matrix=$(jq -c . < ./.github/workflows/clangir-version.json)" >> $GITHUB_OUTPUT

  get-image-tags:
    runs-on: ubuntu-latest
    needs: get-clangir-id
    strategy:
      matrix:
        clangir: ${{ fromJSON(needs.get-clangir-id.outputs.matrix) }}
    outputs:
      ubuntu: ${{ steps.set-image.outputs.ubuntu }}
      ubuntu-legacy: ${{ steps.set-image.outputs.ubuntu-legacy }}
      macos: ${{ steps.set-image.outputs.macos }}
    steps:
      - name: Concat image tags
        id: set-image
        run: |
          echo "ubuntu=$(printf "%s" \
              clangir_ubuntu-latest_build:\
              ${{ matrix.clangir.organization }}_\
              ${{ matrix.clangir.repository }}-\
              ${{ matrix.clangir.version }} \
            )" >> $GITHUB_OUTPUT
          echo "ubuntu-legacy=$(printf "%s" \
              clangir_ubuntu-legacy_build:\
              ${{ matrix.clangir.organization }}_\
              ${{ matrix.clangir.repository }}-\
              ${{ matrix.clangir.version }} \
            )" >> $GITHUB_OUTPUT
          echo "macos=$(printf "%s" \
              clangir_macos-latest_build:\
              ${{ matrix.clangir.organization }}_\
              ${{ matrix.clangir.repository }}-\
              ${{ matrix.clangir.version }} \
            )" >> $GITHUB_OUTPUT

  pull-clangir-build:
    runs-on: ubuntu-latest
    needs: [get-clangir-id, get-image-tags]
    strategy:
      matrix:
        clangir: ${{ fromJSON(needs.get-clangir-id.outputs.matrix) }}
        os: [ubuntu-latest, macos-latest, ubuntu-legacy]

    steps:
      - name: Get image tag (Linux)
        if: startsWith(matrix.os, 'ubuntu-latest')
        run: |
          echo "IMAGE_TAG=${{ needs.get-image-tags.outputs.ubuntu }}" >> $GITHUB_ENV

      - name: Get image tag (Linux legacy)
        if: startsWith(matrix.os, 'ubuntu-legacy')
        run: |
          echo "IMAGE_TAG=${{ needs.get-image-tags.outputs.ubuntu-legacy }}" >> $GITHUB_ENV

      - name: Get image tag (macOS)
        if: startsWith(matrix.os, 'macos')
        run: |
          echo "IMAGE_TAG=${{ needs.get-image-tags.outputs.macos }}" >> $GITHUB_ENV

      - name: Pull clangir build from Docker
        run: |
          docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_TAG }}
          docker create --name clangir_build ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_TAG }}
          mkdir clangir_build
          docker cp clangir_build:/clangir_build ${{ github.workspace }}/build
          docker rm -f clangir_build

      - name: Create artifacts to pass to runners
        uses: actions/upload-artifact@v4
        with:
          name: clangir_${{ matrix.os }}_build
          path: ${{ github.workspace }}/build
          retention-days: 1

  build-macos:
    needs: [get-clangir-id, pull-clangir-build]
    strategy:
      matrix:
        clangir: ${{ fromJSON(needs.get-clangir-id.outputs.matrix) }}
        os: [macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Install Packages
      run: |
        brew install protobuf ninja

    - name: Checkout clangir
      uses: actions/checkout@v4
      with:
        ref: ${{ matrix.clangir.version }}
        repository: ${{ matrix.clangir.organization }}/${{ matrix.clangir.repository }}
        path: ${{ github.workspace }}/clangir

    - name: Fetch clangir build
      uses: actions/download-artifact@v4
      with:
        name: clangir_${{ matrix.os }}_build
        path: ${{ github.workspace }}/clangir/llvm/build

    - uses: actions/checkout@v4
      with:
        path: main

    - name: Build cir-tac
      working-directory: main
      run: |
        mkdir build && cd build
        cmake -DCLANGIR_BUILD_DIR=$GITHUB_WORKSPACE/clangir/llvm/build .. && make

    - name: Upload cir-tac build artifact
      uses: actions/upload-artifact@v4
      with:
        name: cir-tac-${{ matrix.os }}-${{ runner.arch }}
        path:  |
          main/build/tools/cir-ser-proto/cir-ser-proto
          main/build/tools/cir-deser-proto/cir-deser-proto
          main/build/tools/cir-tac-tblgen/cir-tac-tblgen
        retention-days: 1

  build-ubuntu:
    needs: [get-clangir-id, get-image-tags]
    strategy:
      matrix:
        clangir: ${{ fromJSON(needs.get-clangir-id.outputs.matrix) }}
        os: [ubuntu-latest]
    container: explyt/${{ needs.get-image-tags.outputs.ubuntu }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Packages
        run: |
          apt-get update
          apt-get install -y -q --no-install-recommends \
            ninja-build

      - name: Turn off sslverify for git
        run: git config --global http.sslverify false

      - name: Cache Protobuf install
        id: cache-protobuf-install
        uses: actions/cache@v4
        with:
          path: /protobuf-install
          key: ${{ matrix.os }}-protobuf-install

      - name: Build Protobuf
        if: steps.cache-protobuf-install.outputs.cache-hit != 'true'
        run: |
          git clone --recursive https://github.com/protocolbuffers/protobuf.git
          cd protobuf
          git checkout v29.3
          git submodule update --init --recursive
          mkdir build && cd build
          cmake -D CMAKE_BUILD_TYPE=Release \
                -D protobuf_BUILD_TESTS=OFF \
                -D CMAKE_INSTALL_PREFIX=/protobuf-install \
                -G Ninja ..
          ninja
          ninja install

      - name: Install Protobuf
        run: |
          cp -r /protobuf-install/* /usr/local

      - name: Checkout clangir
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.clangir.version }}
          repository: ${{ matrix.clangir.organization }}/${{ matrix.clangir.repository }}
          path: clangir

      - name: Copy clangir to root
        run: |
          mkdir /clangir
          cp -r clangir/* /clangir

      - name: Copy clangir build
        run: |
          mkdir -p /clangir/llvm/build
          cp -r /clangir_build/* /clangir/llvm/build

      - uses: actions/checkout@v4
        with:
          path: main

      - name: Build cir-tac
        working-directory: main
        run: |
          mkdir build && cd build
          cmake -DCLANGIR_BUILD_DIR=/clangir/llvm/build \
                .. && make

      - name: Upload cir-tac build artifact
        uses: actions/upload-artifact@v4
        with:
          name: cir-tac-${{ matrix.os }}-${{ runner.arch }}
          path:  |
            main/build/tools/cir-ser-proto/cir-ser-proto
            main/build/tools/cir-deser-proto/cir-deser-proto
            main/build/tools/cir-tac-tblgen/cir-tac-tblgen
          retention-days: 1

  build-ubuntu-legacy:
    needs: [get-clangir-id, get-image-tags]
    strategy:
      matrix:
        clangir: ${{ fromJSON(needs.get-clangir-id.outputs.matrix) }}
        os: [ubuntu-legacy]
    container: explyt/${{ needs.get-image-tags.outputs.ubuntu-legacy }}

    runs-on: ubuntu-latest

    steps:
      - name: Install Packages
        run: |
          apt-get update
          apt-get install -y -q --no-install-recommends \
            ninja-build

      - name: Turn off sslverify for git
        run: git config --global http.sslverify false

      - name: Cache Protobuf install
        id: cache-protobuf-install
        uses: actions/cache@v4
        with:
          path: /protobuf-install
          key: ${{ matrix.os }}-protobuf-install

      - name: Build Protobuf
        if: steps.cache-protobuf-install.outputs.cache-hit != 'true'
        run: |
          git clone --recursive https://github.com/protocolbuffers/protobuf.git
          cd protobuf
          git checkout v29.3
          git submodule update --init --recursive
          mkdir build && cd build
          cmake -D CMAKE_BUILD_TYPE=Release \
                -D protobuf_BUILD_TESTS=OFF \
                -D CMAKE_INSTALL_PREFIX=/protobuf-install \
                -G Ninja ..
          ninja
          ninja install

      - name: Install Protobuf
        run: |
          cp -r /protobuf-install/* /usr/local

      - name: Checkout clangir
        uses: actions/checkout@v4
        with:
          ref: ${{ matrix.clangir.version }}
          repository: ${{ matrix.clangir.organization }}/${{ matrix.clangir.repository }}
          path: clangir

      - name: Copy clangir to root
        run: |
          mkdir -p /mnt/dist/clangir
          cp -r clangir/* /mnt/dist/clangir

      - name: Copy clangir build
        run: |
          mkdir -p /mnt/dist/clangir/llvm/build
          cp -r /clangir_build/* /mnt/dist/clangir/llvm/build

      - uses: actions/checkout@v4
        with:
          path: main

      - name: Build cir-tac
        working-directory: main
        run: |
          mkdir build && cd build
          PROTOBUF_INSTALL_DIR=/protobuf-install
          cmake -DCLANGIR_BUILD_DIR=/mnt/dist/clangir/llvm/build \
                -DProtobuf_DIR="$PROTOBUF_INSTALL_DIR"/lib/cmake/protobuf \
                -Dutf8_range_DIR="$PROTOBUF_INSTALL_DIR"/lib/cmake/utf8_range \
                -Dabsl_DIR="$PROTOBUF_INSTALL_DIR"/lib/cmake/absl \
                .. && make

      - name: Upload cir-tac build artifact
        uses: actions/upload-artifact@v4
        with:
          name: cir-tac-ubuntu-20.04-${{ runner.arch }}
          path:  |
            main/build/tools/cir-ser-proto/cir-ser-proto
            main/build/tools/cir-deser-proto/cir-deser-proto
            main/build/tools/cir-tac-tblgen/cir-tac-tblgen
          retention-days: 1
