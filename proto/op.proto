/* Autogenerated by mlir-tblgen; don't manually edit. */
// clang-format off

syntax = "proto3";
package protocir;
option java_package = "org.jacodb.impl.grpc";

import "setup.proto";
import "enum.proto";
import "attr.proto";

message MLIROp {
  MLIROpID id = 1;
  MLIRLocation location = 2;
  oneof operation {
    CIRAbsOp abs_op = 3;
    CIRAllocExceptionOp alloc_exception_op = 4;
    CIRAllocaOp alloca_op = 5;
    CIRArrayCtorOp array_ctor_op = 6;
    CIRArrayDtorOp array_dtor_op = 7;
    CIRAssumeAlignedOp assume_aligned_op = 8;
    CIRAssumeOp assume_op = 9;
    CIRAssumeSepStorageOp assume_sep_storage_op = 10;
    CIRAtomicCmpXchgOp atomic_cmp_xchg_op = 11;
    CIRAtomicFetchOp atomic_fetch_op = 12;
    CIRAtomicXchgOp atomic_xchg_op = 13;
    CIRAwaitOp await_op = 14;
    CIRBaseClassAddrOp base_class_addr_op = 15;
    CIRBinOp bin_op = 16;
    CIRBinOpOverflowOp bin_op_overflow_op = 17;
    CIRBitClrsbOp bit_clrsb_op = 18;
    CIRBitClzOp bit_clz_op = 19;
    CIRBitCtzOp bit_ctz_op = 20;
    CIRBitFfsOp bit_ffs_op = 21;
    CIRBitParityOp bit_parity_op = 22;
    CIRBitPopcountOp bit_popcount_op = 23;
    CIRBrCondOp br_cond_op = 24;
    CIRBrOp br_op = 25;
    CIRBreakOp break_op = 26;
    CIRByteswapOp byteswap_op = 27;
    CIRInlineAsmOp inline_asm_op = 28;
    CIRCallOp call_op = 29;
    CIRCaseOp case_op = 30;
    CIRCastOp cast_op = 31;
    CIRCatchParamOp catch_param_op = 32;
    CIRCeilOp ceil_op = 33;
    CIRClearCacheOp clear_cache_op = 34;
    CIRCmpOp cmp_op = 35;
    CIRCmpThreeWayOp cmp_three_way_op = 36;
    CIRComplexBinOp complex_bin_op = 37;
    CIRComplexCreateOp complex_create_op = 38;
    CIRComplexImagOp complex_imag_op = 39;
    CIRComplexImagPtrOp complex_imag_ptr_op = 40;
    CIRComplexRealOp complex_real_op = 41;
    CIRComplexRealPtrOp complex_real_ptr_op = 42;
    CIRConditionOp condition_op = 43;
    CIRConstantOp constant_op = 44;
    CIRContinueOp continue_op = 45;
    CIRCopyOp copy_op = 46;
    CIRCopysignOp copysign_op = 47;
    CIRCosOp cos_op = 48;
    CIRDerivedClassAddrOp derived_class_addr_op = 49;
    CIRDoWhileOp do_while_op = 50;
    CIRDynamicCastOp dynamic_cast_op = 51;
    CIREhInflightOp eh_inflight_op = 52;
    CIREhTypeIdOp eh_type_id_op = 53;
    CIRExp2Op exp2_op = 54;
    CIRExpOp exp_op = 55;
    CIRExpectOp expect_op = 56;
    CIRFAbsOp f_abs_op = 57;
    CIRFMaxOp f_max_op = 58;
    CIRFMinOp f_min_op = 59;
    CIRFModOp f_mod_op = 60;
    CIRFloorOp floor_op = 61;
    CIRForOp for_op = 62;
    CIRFrameAddrOp frame_addr_op = 63;
    CIRFreeExceptionOp free_exception_op = 64;
    CIRFuncOp func_op = 65;
    CIRGetBitfieldOp get_bitfield_op = 66;
    CIRGetGlobalOp get_global_op = 67;
    CIRGetMemberOp get_member_op = 68;
    CIRGetMethodOp get_method_op = 69;
    CIRGetRuntimeMemberOp get_runtime_member_op = 70;
    CIRGlobalOp global_op = 71;
    CIRGotoOp goto_op = 72;
    CIRIfOp if_op = 73;
    CIRIsConstantOp is_constant_op = 74;
    CIRIsFPClassOp is_fp_class_op = 75;
    CIRIterBeginOp iter_begin_op = 76;
    CIRIterEndOp iter_end_op = 77;
    CIRLLVMIntrinsicCallOp llvm_intrinsic_call_op = 78;
    CIRLLrintOp l_lrint_op = 79;
    CIRLLroundOp l_lround_op = 80;
    CIRLabelOp label_op = 81;
    CIRLoadOp load_op = 82;
    CIRLog10Op log10_op = 83;
    CIRLog2Op log2_op = 84;
    CIRLogOp log_op = 85;
    CIRLrintOp lrint_op = 86;
    CIRLroundOp lround_op = 87;
    CIRMemChrOp mem_chr_op = 88;
    CIRMemCpyInlineOp mem_cpy_inline_op = 89;
    CIRMemCpyOp mem_cpy_op = 90;
    CIRMemMoveOp mem_move_op = 91;
    CIRMemSetInlineOp mem_set_inline_op = 92;
    CIRMemSetOp mem_set_op = 93;
    CIRNearbyintOp nearbyint_op = 94;
    CIRObjSizeOp obj_size_op = 95;
    CIRPowOp pow_op = 96;
    CIRPrefetchOp prefetch_op = 97;
    CIRPtrDiffOp ptr_diff_op = 98;
    CIRPtrMaskOp ptr_mask_op = 99;
    CIRPtrStrideOp ptr_stride_op = 100;
    CIRResumeOp resume_op = 101;
    CIRReturnAddrOp return_addr_op = 102;
    CIRReturnOp return_op = 103;
    CIRRintOp rint_op = 104;
    CIRRotateOp rotate_op = 105;
    CIRRoundOp round_op = 106;
    CIRScopeOp scope_op = 107;
    CIRSelectOp select_op = 108;
    CIRSetBitfieldOp set_bitfield_op = 109;
    CIRShiftOp shift_op = 110;
    CIRSignBitOp sign_bit_op = 111;
    CIRSinOp sin_op = 112;
    CIRSqrtOp sqrt_op = 113;
    CIRStackRestoreOp stack_restore_op = 114;
    CIRStackSaveOp stack_save_op = 115;
    CIRStdFindOp std_find_op = 116;
    CIRStdInitializerListOp std_initializer_list_op = 117;
    CIRStoreOp store_op = 118;
    CIRSwitchFlatOp switch_flat_op = 119;
    CIRSwitchOp switch_op = 120;
    CIRTernaryOp ternary_op = 121;
    CIRThrowOp throw_op = 122;
    CIRTrapOp trap_op = 123;
    CIRTruncOp trunc_op = 124;
    CIRTryCallOp try_call_op = 125;
    CIRTryOp try_op = 126;
    CIRUnaryOp unary_op = 127;
    CIRUnreachableOp unreachable_op = 128;
    CIRVAArgOp va_arg_op = 129;
    CIRVACopyOp va_copy_op = 130;
    CIRVAEndOp va_end_op = 131;
    CIRVAStartOp va_start_op = 132;
    CIRVTTAddrPointOp vtt_addr_point_op = 133;
    CIRVTableAddrPointOp v_table_addr_point_op = 134;
    CIRVecCmpOp vec_cmp_op = 135;
    CIRVecCreateOp vec_create_op = 136;
    CIRVecExtractOp vec_extract_op = 137;
    CIRVecInsertOp vec_insert_op = 138;
    CIRVecShuffleDynamicOp vec_shuffle_dynamic_op = 139;
    CIRVecShuffleOp vec_shuffle_op = 140;
    CIRVecSplatOp vec_splat_op = 141;
    CIRVecTernaryOp vec_ternary_op = 142;
    CIRWhileOp while_op = 143;
    CIRYieldOp yield_op = 144;
  }
}

message CIRAbsOp {
  // 1 operands
  MLIRValue src = 1;

  // 1 native attributes
  optional MLIRUnitAttr poison = 2;

  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRAllocExceptionOp {
  // 0 operands
  // 1 native attributes
  MLIRIntegerAttr size = 1;

  // 0 successors
  // 1 results
  MLIRTypeID addr = 2;
}

message CIRAllocaOp {
  // 1 operands
  optional MLIRValue dyn_alloc_size = 1;

  // 7 native attributes
  MLIRTypeAttr alloca_type = 2;
  MLIRStringAttr name = 3;
  optional MLIRUnitAttr init = 4;
  optional MLIRUnitAttr constant = 5;
  optional MLIRIntegerAttr alignment = 6;
  optional MLIRArrayAttr annotations = 7;
  // [CIRASTVarDeclInterface ast] is ignored

  // 0 successors
  // 1 results
  MLIRTypeID addr = 8;
}

message CIRArrayCtorOp {
  // 1 operands
  MLIRValue addr = 1;

  // 0 native attributes
  // 0 successors
  // 0 results

  // 1 regions are ignored for now
}

message CIRArrayDtorOp {
  // 1 operands
  MLIRValue addr = 1;

  // 0 native attributes
  // 0 successors
  // 0 results

  // 1 regions are ignored for now
}

message CIRAssumeAlignedOp {
  // 2 operands
  MLIRValue pointer = 1;
  optional MLIRValue offset = 2;

  // 1 native attributes
  MLIRIntegerAttr alignment = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRAssumeOp {
  // 1 operands
  MLIRValue predicate = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRAssumeSepStorageOp {
  // 2 operands
  MLIRValue ptr1 = 1;
  MLIRValue ptr2 = 2;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRAtomicCmpXchgOp {
  // 3 operands
  MLIRValue ptr = 1;
  MLIRValue expected = 2;
  MLIRValue desired = 3;

  // 4 native attributes
  CIRMemOrder succ_order = 4;
  CIRMemOrder fail_order = 5;
  optional MLIRUnitAttr weak = 6;
  optional MLIRUnitAttr is_volatile = 7;

  // 0 successors
  // 2 results
  MLIRTypeID old = 8;
  MLIRTypeID cmp = 9;
}

message CIRAtomicFetchOp {
  // 2 operands
  MLIRValue ptr = 1;
  MLIRValue val = 2;

  // 4 native attributes
  CIRAtomicFetchKind binop = 3;
  CIRMemOrder mem_order = 4;
  optional MLIRUnitAttr is_volatile = 5;
  optional MLIRUnitAttr fetch_first = 6;

  // 0 successors
  // 1 results
  MLIRTypeID result = 7;
}

message CIRAtomicXchgOp {
  // 2 operands
  MLIRValue ptr = 1;
  MLIRValue val = 2;

  // 2 native attributes
  CIRMemOrder mem_order = 3;
  optional MLIRUnitAttr is_volatile = 4;

  // 0 successors
  // 1 results
  MLIRTypeID result = 5;
}

message CIRAwaitOp {
  // 0 operands
  // 1 native attributes
  CIRAwaitKind kind = 1;

  // 0 successors
  // 0 results

  // 3 regions are ignored for now
}

message CIRBaseClassAddrOp {
  // 1 operands
  MLIRValue derived_addr = 1;

  // 2 native attributes
  MLIRIntegerAttr offset = 2;
  optional MLIRUnitAttr assume_not_null = 3;

  // 0 successors
  // 1 results
  MLIRTypeID base_addr = 4;
}

message CIRBinOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 3 native attributes
  CIRBinOpKind kind = 3;
  optional MLIRUnitAttr no_unsigned_wrap = 4;
  optional MLIRUnitAttr no_signed_wrap = 5;

  // 0 successors
  // 1 results
  MLIRTypeID result = 6;
}

message CIRBinOpOverflowOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 1 native attributes
  CIRBinOpOverflowKind kind = 3;

  // 0 successors
  // 2 results
  MLIRTypeID result = 4;
  MLIRTypeID overflow = 5;
}

message CIRBitClrsbOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRBitClzOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRBitCtzOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRBitFfsOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRBitParityOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRBitPopcountOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRBrCondOp {
  // 3 operands
  MLIRValue cond = 1;
  repeated MLIRValue dest_operands_true = 2;
  repeated MLIRValue dest_operands_false = 3;

  // 0 native attributes
  // 2 successors
  MLIRBlockID dest_true = 4;
  MLIRBlockID dest_false = 5;

  // 0 results
}

message CIRBrOp {
  // 1 operands
  repeated MLIRValue dest_operands = 1;

  // 0 native attributes
  // 1 successors
  MLIRBlockID dest = 2;

  // 0 results
}

message CIRBreakOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRByteswapOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRInlineAsmOp {
  // 1 operands
  repeated MLIRValueList operands = 1;

  // 6 native attributes
  MLIRStringAttr asm_string = 2;
  MLIRStringAttr constraints = 3;
  optional MLIRUnitAttr side_effects = 4;
  CIRAsmFlavor asm_flavor = 5;
  MLIRArrayAttr operand_attrs = 6;
  MLIRDenseI32ArrayAttr operands_segments = 7;

  // 0 successors
  // 1 results
  optional MLIRTypeID res = 8;
}

message CIRCallOp {
  // 1 operands
  repeated MLIRValue arg_ops = 1;

  // 5 native attributes
  optional MLIRUnitAttr exception = 2;
  optional MLIRFlatSymbolRefAttr callee = 3;
  CIRCallingConv calling_conv = 4;
  CIRExtraFuncAttributesAttr extra_attrs = 5;
  // [CIRASTCallExprInterface ast] is ignored

  // 0 successors
  // 1 results
  optional MLIRTypeID result = 6;

  // 1 regions are ignored for now
}

message CIRCaseOp {
  // 0 operands
  // 2 native attributes
  MLIRArrayAttr value = 1;
  CIRCaseOpKind kind = 2;

  // 0 successors
  // 0 results

  // 1 regions are ignored for now
}

message CIRCastOp {
  // 1 operands
  MLIRValue src = 1;

  // 1 native attributes
  CIRCastKind kind = 2;

  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRCatchParamOp {
  // 1 operands
  optional MLIRValue exception_ptr = 1;

  // 1 native attributes
  optional CIRCatchParamKind kind = 2;

  // 0 successors
  // 1 results
  optional MLIRTypeID param = 3;
}

message CIRCeilOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRClearCacheOp {
  // 2 operands
  MLIRValue begin = 1;
  MLIRValue end = 2;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRCmpOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 1 native attributes
  CIRCmpOpKind kind = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRCmpThreeWayOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 1 native attributes
  CIRCmpThreeWayInfoAttr info = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRComplexBinOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 3 native attributes
  CIRComplexBinOpKind kind = 3;
  CIRComplexRangeKind range = 4;
  optional MLIRUnitAttr promoted = 5;

  // 0 successors
  // 1 results
  MLIRTypeID result = 6;
}

message CIRComplexCreateOp {
  // 2 operands
  MLIRValue real = 1;
  MLIRValue imag = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRComplexImagOp {
  // 1 operands
  MLIRValue operand = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRComplexImagPtrOp {
  // 1 operands
  MLIRValue operand = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRComplexRealOp {
  // 1 operands
  MLIRValue operand = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRComplexRealPtrOp {
  // 1 operands
  MLIRValue operand = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRConditionOp {
  // 1 operands
  MLIRValue condition = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRConstantOp {
  // 0 operands
  // 1 native attributes
  MLIRAttribute value = 1;

  // 0 successors
  // 1 results
  MLIRTypeID res = 2;
}

message CIRContinueOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRCopyOp {
  // 2 operands
  MLIRValue dst = 1;
  MLIRValue src = 2;

  // 2 native attributes
  optional MLIRUnitAttr is_volatile = 3;
  optional MLIRArrayAttr tbaa = 4;

  // 0 successors
  // 0 results
}

message CIRCopysignOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRCosOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRDerivedClassAddrOp {
  // 1 operands
  MLIRValue base_addr = 1;

  // 2 native attributes
  MLIRIntegerAttr offset = 2;
  optional MLIRUnitAttr assume_not_null = 3;

  // 0 successors
  // 1 results
  MLIRTypeID derived_addr = 4;
}

message CIRDoWhileOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 0 results

  // 2 regions are ignored for now
}

message CIRDynamicCastOp {
  // 1 operands
  MLIRValue src = 1;

  // 3 native attributes
  CIRDynamicCastKind kind = 2;
  optional CIRDynamicCastInfoAttr info = 3;
  optional MLIRUnitAttr relative_layout = 4;

  // 0 successors
  // 1 results
  MLIRTypeID result = 5;
}

message CIREhInflightOp {
  // 0 operands
  // 2 native attributes
  optional MLIRUnitAttr cleanup = 1;
  optional MLIRArrayAttr sym_type_list = 2;

  // 0 successors
  // 2 results
  MLIRTypeID exception_ptr = 3;
  MLIRTypeID type_id = 4;
}

message CIREhTypeIdOp {
  // 0 operands
  // 1 native attributes
  MLIRFlatSymbolRefAttr type_sym = 1;

  // 0 successors
  // 1 results
  MLIRTypeID type_id = 2;
}

message CIRExp2Op {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRExpOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRExpectOp {
  // 2 operands
  MLIRValue val = 1;
  MLIRValue expected = 2;

  // 1 native attributes
  optional MLIRFloatAttr prob = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRFAbsOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRFMaxOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRFMinOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRFModOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRFloorOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRForOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 0 results

  // 3 regions are ignored for now
}

message CIRFrameAddrOp {
  // 1 operands
  MLIRValue level = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRFreeExceptionOp {
  // 1 operands
  MLIRValue ptr = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRFuncOp {
  // 0 operands
  // 20 native attributes
  MLIRStringAttr sym_name = 1;
  CIRVisibilityAttr global_visibility = 2;
  MLIRTypeAttr function_type = 3;
  optional MLIRUnitAttr builtin = 4;
  optional MLIRUnitAttr coroutine = 5;
  optional MLIRUnitAttr lambda = 6;
  optional MLIRUnitAttr no_proto = 7;
  optional MLIRUnitAttr dsolocal = 8;
  CIRGlobalLinkageKind linkage = 9;
  CIRCallingConv calling_conv = 10;
  CIRExtraFuncAttributesAttr extra_attrs = 11;
  optional MLIRStringAttr sym_visibility = 12;
  optional MLIRUnitAttr comdat = 13;
  optional MLIRArrayAttr arg_attrs = 14;
  optional MLIRArrayAttr res_attrs = 15;
  optional MLIRFlatSymbolRefAttr aliasee = 16;
  optional CIRGlobalCtorAttr global_ctor = 17;
  optional CIRGlobalDtorAttr global_dtor = 18;
  optional MLIRArrayAttr annotations = 19;
  optional MLIRAttribute ast = 20;

  // 0 successors
  // 0 results

  // 1 regions are ignored for now
}

message CIRGetBitfieldOp {
  // 1 operands
  MLIRValue addr = 1;

  // 2 native attributes
  CIRBitfieldInfoAttr bitfield_info = 2;
  optional MLIRUnitAttr is_volatile = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRGetGlobalOp {
  // 0 operands
  // 2 native attributes
  MLIRFlatSymbolRefAttr name = 1;
  optional MLIRUnitAttr tls = 2;

  // 0 successors
  // 1 results
  MLIRTypeID addr = 3;
}

message CIRGetMemberOp {
  // 1 operands
  MLIRValue addr = 1;

  // 2 native attributes
  MLIRStringAttr name = 2;
  MLIRIntegerAttr index_attr = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRGetMethodOp {
  // 2 operands
  MLIRValue method = 1;
  MLIRValue object = 2;

  // 0 native attributes
  // 0 successors
  // 2 results
  MLIRTypeID callee = 3;
  MLIRTypeID adjusted_this = 4;
}

message CIRGetRuntimeMemberOp {
  // 2 operands
  MLIRValue addr = 1;
  MLIRValue member = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRGlobalOp {
  // 0 operands
  // 15 native attributes
  MLIRStringAttr sym_name = 1;
  CIRVisibilityAttr global_visibility = 2;
  optional MLIRStringAttr sym_visibility = 3;
  MLIRTypeAttr sym_type = 4;
  CIRGlobalLinkageKind linkage = 5;
  optional CIRAddressSpaceAttr addr_space = 6;
  optional CIRTLSModel tls_model = 7;
  optional MLIRAttribute initial_value = 8;
  optional MLIRUnitAttr comdat = 9;
  optional MLIRUnitAttr constant = 10;
  optional MLIRUnitAttr dsolocal = 11;
  optional MLIRIntegerAttr alignment = 12;
  // [CIRASTVarDeclInterface ast] is ignored
  optional MLIRStringAttr section = 13;
  optional MLIRArrayAttr annotations = 14;

  // 0 successors
  // 0 results

  // 2 regions are ignored for now
}

message CIRGotoOp {
  // 0 operands
  // 1 native attributes
  MLIRStringAttr label = 1;

  // 0 successors
  // 0 results
}

message CIRIfOp {
  // 1 operands
  MLIRValue condition = 1;

  // 0 native attributes
  // 0 successors
  // 0 results

  // 2 regions are ignored for now
}

message CIRIsConstantOp {
  // 1 operands
  MLIRValue val = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRIsFPClassOp {
  // 1 operands
  MLIRValue src = 1;

  // 1 native attributes
  MLIRIntegerAttr flags = 2;

  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRIterBeginOp {
  // 1 operands
  MLIRValue container = 1;

  // 1 native attributes
  MLIRFlatSymbolRefAttr original_fn = 2;

  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRIterEndOp {
  // 1 operands
  MLIRValue container = 1;

  // 1 native attributes
  MLIRFlatSymbolRefAttr original_fn = 2;

  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRLLVMIntrinsicCallOp {
  // 1 operands
  repeated MLIRValue arg_ops = 1;

  // 1 native attributes
  MLIRStringAttr intrinsic_name = 2;

  // 0 successors
  // 1 results
  optional MLIRTypeID result = 3;
}

message CIRLLrintOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRLLroundOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRLabelOp {
  // 0 operands
  // 1 native attributes
  MLIRStringAttr label = 1;

  // 0 successors
  // 0 results
}

message CIRLoadOp {
  // 1 operands
  MLIRValue addr = 1;

  // 5 native attributes
  optional MLIRUnitAttr is_deref = 2;
  optional MLIRUnitAttr is_volatile = 3;
  optional MLIRIntegerAttr alignment = 4;
  optional CIRMemOrder mem_order = 5;
  optional MLIRArrayAttr tbaa = 6;

  // 0 successors
  // 1 results
  MLIRTypeID result = 7;
}

message CIRLog10Op {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRLog2Op {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRLogOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRLrintOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRLroundOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRMemChrOp {
  // 3 operands
  MLIRValue src = 1;
  MLIRValue pattern = 2;
  MLIRValue len = 3;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRMemCpyInlineOp {
  // 2 operands
  MLIRValue dst = 1;
  MLIRValue src = 2;

  // 1 native attributes
  MLIRIntegerAttr len = 3;

  // 0 successors
  // 0 results
}

message CIRMemCpyOp {
  // 3 operands
  MLIRValue dst = 1;
  MLIRValue src = 2;
  MLIRValue len = 3;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRMemMoveOp {
  // 3 operands
  MLIRValue dst = 1;
  MLIRValue src = 2;
  MLIRValue len = 3;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRMemSetInlineOp {
  // 2 operands
  MLIRValue dst = 1;
  MLIRValue val = 2;

  // 1 native attributes
  MLIRIntegerAttr len = 3;

  // 0 successors
  // 0 results
}

message CIRMemSetOp {
  // 3 operands
  MLIRValue dst = 1;
  MLIRValue val = 2;
  MLIRValue len = 3;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRNearbyintOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRObjSizeOp {
  // 1 operands
  MLIRValue ptr = 1;

  // 2 native attributes
  CIRSizeInfoType kind = 2;
  optional MLIRUnitAttr dynamic = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRPowOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRPrefetchOp {
  // 1 operands
  MLIRValue addr = 1;

  // 2 native attributes
  MLIRIntegerAttr locality = 2;
  optional MLIRUnitAttr is_write = 3;

  // 0 successors
  // 0 results
}

message CIRPtrDiffOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRPtrMaskOp {
  // 2 operands
  MLIRValue ptr = 1;
  MLIRValue mask = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRPtrStrideOp {
  // 2 operands
  MLIRValue base = 1;
  MLIRValue stride = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRResumeOp {
  // 2 operands
  optional MLIRValue exception_ptr = 1;
  optional MLIRValue type_id = 2;

  // 1 native attributes
  optional MLIRUnitAttr rethrow = 3;

  // 0 successors
  // 0 results
}

message CIRReturnAddrOp {
  // 1 operands
  MLIRValue level = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRReturnOp {
  // 1 operands
  repeated MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRRintOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRRotateOp {
  // 2 operands
  MLIRValue src = 1;
  MLIRValue amt = 2;

  // 1 native attributes
  optional MLIRUnitAttr left = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRRoundOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRScopeOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 1 results
  optional MLIRTypeID results = 1;

  // 1 regions are ignored for now
}

message CIRSelectOp {
  // 3 operands
  MLIRValue condition = 1;
  MLIRValue true_value = 2;
  MLIRValue false_value = 3;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRSetBitfieldOp {
  // 2 operands
  MLIRValue addr = 1;
  MLIRValue src = 2;

  // 2 native attributes
  CIRBitfieldInfoAttr bitfield_info = 3;
  optional MLIRUnitAttr is_volatile = 4;

  // 0 successors
  // 1 results
  MLIRTypeID result = 5;
}

message CIRShiftOp {
  // 2 operands
  MLIRValue value = 1;
  MLIRValue amount = 2;

  // 1 native attributes
  optional MLIRUnitAttr is_shiftleft = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRSignBitOp {
  // 1 operands
  MLIRValue input = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID res = 2;
}

message CIRSinOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRSqrtOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRStackRestoreOp {
  // 1 operands
  MLIRValue ptr = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRStackSaveOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 1;
}

message CIRStdFindOp {
  // 3 operands
  MLIRValue first = 1;
  MLIRValue last = 2;
  MLIRValue pattern = 3;

  // 1 native attributes
  MLIRFlatSymbolRefAttr original_fn = 4;

  // 0 successors
  // 1 results
  MLIRTypeID result = 5;
}

message CIRStdInitializerListOp {
  // 2 operands
  MLIRValue init_list = 1;
  repeated MLIRValue args = 2;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRStoreOp {
  // 2 operands
  MLIRValue value = 1;
  MLIRValue addr = 2;

  // 4 native attributes
  optional MLIRUnitAttr is_volatile = 3;
  optional MLIRIntegerAttr alignment = 4;
  optional CIRMemOrder mem_order = 5;
  optional MLIRArrayAttr tbaa = 6;

  // 0 successors
  // 0 results
}

message CIRSwitchFlatOp {
  // 3 operands
  MLIRValue condition = 1;
  repeated MLIRValue default_operands = 2;
  repeated MLIRValueList case_operands = 3;

  // 2 native attributes
  MLIRArrayAttr case_values = 4;
  MLIRDenseI32ArrayAttr case_operand_segments = 5;

  // 2 successors
  MLIRBlockID default_destination = 6;
  repeated MLIRBlockID case_destinations = 7;

  // 0 results
}

message CIRSwitchOp {
  // 1 operands
  MLIRValue condition = 1;

  // 0 native attributes
  // 0 successors
  // 0 results

  // 1 regions are ignored for now
}

message CIRTernaryOp {
  // 1 operands
  MLIRValue cond = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  optional MLIRTypeID result = 2;

  // 2 regions are ignored for now
}

message CIRThrowOp {
  // 1 operands
  optional MLIRValue exception_ptr = 1;

  // 2 native attributes
  optional MLIRFlatSymbolRefAttr type_info = 2;
  optional MLIRFlatSymbolRefAttr dtor = 3;

  // 0 successors
  // 0 results
}

message CIRTrapOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRTruncOp {
  // 1 operands
  MLIRValue src = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRTryCallOp {
  // 3 operands
  repeated MLIRValue cont_operands = 1;
  repeated MLIRValue landing_pad_operands = 2;
  repeated MLIRValue arg_ops = 3;

  // 4 native attributes
  optional MLIRFlatSymbolRefAttr callee = 4;
  CIRCallingConv calling_conv = 5;
  CIRExtraFuncAttributesAttr extra_attrs = 6;
  // [CIRASTCallExprInterface ast] is ignored

  // 2 successors
  MLIRBlockID cont = 7;
  MLIRBlockID landing_pad = 8;

  // 1 results
  optional MLIRTypeID result = 9;
}

message CIRTryOp {
  // 0 operands
  // 3 native attributes
  optional MLIRUnitAttr synthetic = 1;
  optional MLIRUnitAttr cleanup = 2;
  optional MLIRArrayAttr catch_types = 3;

  // 0 successors
  // 0 results

  // 2 regions are ignored for now
}

message CIRUnaryOp {
  // 1 operands
  MLIRValue input = 1;

  // 1 native attributes
  CIRUnaryOpKind kind = 2;

  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRUnreachableOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRVAArgOp {
  // 1 operands
  MLIRValue arg_list = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRVACopyOp {
  // 2 operands
  MLIRValue dst_list = 1;
  MLIRValue src_list = 2;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRVAEndOp {
  // 1 operands
  MLIRValue arg_list = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRVAStartOp {
  // 1 operands
  MLIRValue arg_list = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

message CIRVTTAddrPointOp {
  // 1 operands
  optional MLIRValue sym_addr = 1;

  // 2 native attributes
  optional MLIRFlatSymbolRefAttr name = 2;
  MLIRIntegerAttr offset = 3;

  // 0 successors
  // 1 results
  MLIRTypeID addr = 4;
}

message CIRVTableAddrPointOp {
  // 1 operands
  optional MLIRValue sym_addr = 1;

  // 3 native attributes
  optional MLIRFlatSymbolRefAttr name = 2;
  MLIRIntegerAttr vtable_index = 3;
  MLIRIntegerAttr address_point_index = 4;

  // 0 successors
  // 1 results
  MLIRTypeID addr = 5;
}

message CIRVecCmpOp {
  // 2 operands
  MLIRValue lhs = 1;
  MLIRValue rhs = 2;

  // 1 native attributes
  CIRCmpOpKind kind = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRVecCreateOp {
  // 1 operands
  repeated MLIRValue elements = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRVecExtractOp {
  // 2 operands
  MLIRValue vec = 1;
  MLIRValue index = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRVecInsertOp {
  // 3 operands
  MLIRValue vec = 1;
  MLIRValue value = 2;
  MLIRValue index = 3;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRVecShuffleDynamicOp {
  // 2 operands
  MLIRValue vec = 1;
  MLIRValue indices = 2;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 3;
}

message CIRVecShuffleOp {
  // 2 operands
  MLIRValue vec1 = 1;
  MLIRValue vec2 = 2;

  // 1 native attributes
  MLIRArrayAttr indices = 3;

  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRVecSplatOp {
  // 1 operands
  MLIRValue value = 1;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 2;
}

message CIRVecTernaryOp {
  // 3 operands
  MLIRValue cond = 1;
  MLIRValue vec1 = 2;
  MLIRValue vec2 = 3;

  // 0 native attributes
  // 0 successors
  // 1 results
  MLIRTypeID result = 4;
}

message CIRWhileOp {
  // 0 operands
  // 0 native attributes
  // 0 successors
  // 0 results

  // 2 regions are ignored for now
}

message CIRYieldOp {
  // 1 operands
  repeated MLIRValue args = 1;

  // 0 native attributes
  // 0 successors
  // 0 results
}

// clang-format on
