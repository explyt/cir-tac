/* Autogenerated by mlir-tblgen; don't manually edit. */
// clang-format off

#include "cir-tac/AttrSerializer.h"
#include "cir-tac/EnumSerializer.h"
#include "proto/attr.pb.h"

#include <llvm/ADT/TypeSwitch.h>

using namespace protocir;

MLIRAttribute AttributeSerializer::serializeMLIRAttribute(mlir::Attribute attr) {
  MLIRAttribute pAttr;

  llvm::TypeSwitch<mlir::Attribute>(attr)
  .Case<mlir::ArrayAttr>([this, &pAttr](mlir::ArrayAttr attr) {
    auto serialized = serializeMLIRArrayAttr(attr);
    *pAttr.mutable_array_attr() = serialized;
  })
  .Case<mlir::DictionaryAttr>([this, &pAttr](mlir::DictionaryAttr attr) {
    auto serialized = serializeMLIRDictionaryAttr(attr);
    *pAttr.mutable_dictionary_attr() = serialized;
  })
  .Case<mlir::IntegerAttr>([this, &pAttr](mlir::IntegerAttr attr) {
    auto serialized = serializeMLIRIntegerAttr(attr);
    *pAttr.mutable_integer_attr() = serialized;
  })
  .Case<mlir::StringAttr>([this, &pAttr](mlir::StringAttr attr) {
    auto serialized = serializeMLIRStringAttr(attr);
    *pAttr.mutable_string_attr() = serialized;
  })
  .Case<mlir::TypeAttr>([this, &pAttr](mlir::TypeAttr attr) {
    auto serialized = serializeMLIRTypeAttr(attr);
    *pAttr.mutable_type_attr() = serialized;
  })
  .Case<mlir::FlatSymbolRefAttr>([this, &pAttr](mlir::FlatSymbolRefAttr attr) {
    auto serialized = serializeMLIRFlatSymbolRefAttr(attr);
    *pAttr.mutable_flat_symbol_ref_attr() = serialized;
  })
  .Case<cir::AddressSpaceAttr>([this, &pAttr](cir::AddressSpaceAttr attr) {
    auto serialized = serializeCIRAddressSpaceAttr(attr);
    *pAttr.mutable_address_space_attr() = serialized;
  })
  .Case<cir::AnnotationAttr>([this, &pAttr](cir::AnnotationAttr attr) {
    auto serialized = serializeCIRAnnotationAttr(attr);
    *pAttr.mutable_annotation_attr() = serialized;
  })
  .Case<cir::BitfieldInfoAttr>([this, &pAttr](cir::BitfieldInfoAttr attr) {
    auto serialized = serializeCIRBitfieldInfoAttr(attr);
    *pAttr.mutable_bitfield_info_attr() = serialized;
  })
  .Case<cir::BoolAttr>([this, &pAttr](cir::BoolAttr attr) {
    auto serialized = serializeCIRBoolAttr(attr);
    *pAttr.mutable_bool_attr() = serialized;
  })
  .Case<cir::TBAAAttr>([this, &pAttr](cir::TBAAAttr attr) {
    auto serialized = serializeCIRTBAAAttr(attr);
    *pAttr.mutable_tbaa_attr() = serialized;
  })
  .Case<cir::CmpThreeWayInfoAttr>([this, &pAttr](cir::CmpThreeWayInfoAttr attr) {
    auto serialized = serializeCIRCmpThreeWayInfoAttr(attr);
    *pAttr.mutable_cmp_three_way_info_attr() = serialized;
  })
  .Case<cir::ComplexAttr>([this, &pAttr](cir::ComplexAttr attr) {
    auto serialized = serializeCIRComplexAttr(attr);
    *pAttr.mutable_complex_attr() = serialized;
  })
  .Case<cir::ConstArrayAttr>([this, &pAttr](cir::ConstArrayAttr attr) {
    auto serialized = serializeCIRConstArrayAttr(attr);
    *pAttr.mutable_const_array_attr() = serialized;
  })
  .Case<cir::ConstPtrAttr>([this, &pAttr](cir::ConstPtrAttr attr) {
    auto serialized = serializeCIRConstPtrAttr(attr);
    *pAttr.mutable_const_ptr_attr() = serialized;
  })
  .Case<cir::ConstStructAttr>([this, &pAttr](cir::ConstStructAttr attr) {
    auto serialized = serializeCIRConstStructAttr(attr);
    *pAttr.mutable_const_struct_attr() = serialized;
  })
  .Case<cir::ConstVectorAttr>([this, &pAttr](cir::ConstVectorAttr attr) {
    auto serialized = serializeCIRConstVectorAttr(attr);
    *pAttr.mutable_const_vector_attr() = serialized;
  })
  .Case<cir::ConvergentAttr>([this, &pAttr](cir::ConvergentAttr attr) {
    auto serialized = serializeCIRConvergentAttr(attr);
    *pAttr.mutable_convergent_attr() = serialized;
  })
  .Case<cir::DataMemberAttr>([this, &pAttr](cir::DataMemberAttr attr) {
    auto serialized = serializeCIRDataMemberAttr(attr);
    *pAttr.mutable_data_member_attr() = serialized;
  })
  .Case<cir::DynamicCastInfoAttr>([this, &pAttr](cir::DynamicCastInfoAttr attr) {
    auto serialized = serializeCIRDynamicCastInfoAttr(attr);
    *pAttr.mutable_dynamic_cast_info_attr() = serialized;
  })
  .Case<cir::ExtraFuncAttributesAttr>([this, &pAttr](cir::ExtraFuncAttributesAttr attr) {
    auto serialized = serializeCIRExtraFuncAttributesAttr(attr);
    *pAttr.mutable_extra_func_attributes_attr() = serialized;
  })
  .Case<cir::FPAttr>([this, &pAttr](cir::FPAttr attr) {
    auto serialized = serializeCIRFPAttr(attr);
    *pAttr.mutable_fp_attr() = serialized;
  })
  .Case<cir::GlobalAnnotationValuesAttr>([this, &pAttr](cir::GlobalAnnotationValuesAttr attr) {
    auto serialized = serializeCIRGlobalAnnotationValuesAttr(attr);
    *pAttr.mutable_global_annotation_values_attr() = serialized;
  })
  .Case<cir::GlobalCtorAttr>([this, &pAttr](cir::GlobalCtorAttr attr) {
    auto serialized = serializeCIRGlobalCtorAttr(attr);
    *pAttr.mutable_global_ctor_attr() = serialized;
  })
  .Case<cir::GlobalDtorAttr>([this, &pAttr](cir::GlobalDtorAttr attr) {
    auto serialized = serializeCIRGlobalDtorAttr(attr);
    *pAttr.mutable_global_dtor_attr() = serialized;
  })
  .Case<cir::GlobalViewAttr>([this, &pAttr](cir::GlobalViewAttr attr) {
    auto serialized = serializeCIRGlobalViewAttr(attr);
    *pAttr.mutable_global_view_attr() = serialized;
  })
  .Case<cir::InactiveUnionFieldAttr>([this, &pAttr](cir::InactiveUnionFieldAttr attr) {
    auto serialized = serializeCIRInactiveUnionFieldAttr(attr);
    *pAttr.mutable_inactive_union_field_attr() = serialized;
  })
  .Case<cir::InlineAttr>([this, &pAttr](cir::InlineAttr attr) {
    auto serialized = serializeCIRInlineAttr(attr);
    *pAttr.mutable_inline_attr() = serialized;
  })
  .Case<cir::IntAttr>([this, &pAttr](cir::IntAttr attr) {
    auto serialized = serializeCIRIntAttr(attr);
    *pAttr.mutable_int_attr() = serialized;
  })
  .Case<cir::LangAttr>([this, &pAttr](cir::LangAttr attr) {
    auto serialized = serializeCIRLangAttr(attr);
    *pAttr.mutable_lang_attr() = serialized;
  })
  .Case<cir::MethodAttr>([this, &pAttr](cir::MethodAttr attr) {
    auto serialized = serializeCIRMethodAttr(attr);
    *pAttr.mutable_method_attr() = serialized;
  })
  .Case<cir::NoThrowAttr>([this, &pAttr](cir::NoThrowAttr attr) {
    auto serialized = serializeCIRNoThrowAttr(attr);
    *pAttr.mutable_no_throw_attr() = serialized;
  })
  .Case<cir::OpenCLKernelArgMetadataAttr>([this, &pAttr](cir::OpenCLKernelArgMetadataAttr attr) {
    auto serialized = serializeCIROpenCLKernelArgMetadataAttr(attr);
    *pAttr.mutable_open_cl_kernel_arg_metadata_attr() = serialized;
  })
  .Case<cir::OpenCLKernelAttr>([this, &pAttr](cir::OpenCLKernelAttr attr) {
    auto serialized = serializeCIROpenCLKernelAttr(attr);
    *pAttr.mutable_open_cl_kernel_attr() = serialized;
  })
  .Case<cir::OpenCLKernelMetadataAttr>([this, &pAttr](cir::OpenCLKernelMetadataAttr attr) {
    auto serialized = serializeCIROpenCLKernelMetadataAttr(attr);
    *pAttr.mutable_open_cl_kernel_metadata_attr() = serialized;
  })
  .Case<cir::OpenCLKernelUniformWorkGroupSizeAttr>([this, &pAttr](cir::OpenCLKernelUniformWorkGroupSizeAttr attr) {
    auto serialized = serializeCIROpenCLKernelUniformWorkGroupSizeAttr(attr);
    *pAttr.mutable_open_cl_kernel_uniform_work_group_size_attr() = serialized;
  })
  .Case<cir::OpenCLVersionAttr>([this, &pAttr](cir::OpenCLVersionAttr attr) {
    auto serialized = serializeCIROpenCLVersionAttr(attr);
    *pAttr.mutable_open_cl_version_attr() = serialized;
  })
  .Case<cir::OptNoneAttr>([this, &pAttr](cir::OptNoneAttr attr) {
    auto serialized = serializeCIROptNoneAttr(attr);
    *pAttr.mutable_opt_none_attr() = serialized;
  })
  .Case<cir::StructLayoutAttr>([this, &pAttr](cir::StructLayoutAttr attr) {
    auto serialized = serializeCIRStructLayoutAttr(attr);
    *pAttr.mutable_struct_layout_attr() = serialized;
  })
  .Case<cir::TypeInfoAttr>([this, &pAttr](cir::TypeInfoAttr attr) {
    auto serialized = serializeCIRTypeInfoAttr(attr);
    *pAttr.mutable_type_info_attr() = serialized;
  })
  .Case<cir::UndefAttr>([this, &pAttr](cir::UndefAttr attr) {
    auto serialized = serializeCIRUndefAttr(attr);
    *pAttr.mutable_undef_attr() = serialized;
  })
  .Case<cir::VTableAttr>([this, &pAttr](cir::VTableAttr attr) {
    auto serialized = serializeCIRVTableAttr(attr);
    *pAttr.mutable_v_table_attr() = serialized;
  })
  .Case<cir::VisibilityAttr>([this, &pAttr](cir::VisibilityAttr attr) {
    auto serialized = serializeCIRVisibilityAttr(attr);
    *pAttr.mutable_visibility_attr() = serialized;
  })
  .Case<cir::ZeroAttr>([this, &pAttr](cir::ZeroAttr attr) {
    auto serialized = serializeCIRZeroAttr(attr);
    *pAttr.mutable_zero_attr() = serialized;
  })
  .Default([](mlir::Attribute attr) {
    attr.dump();
    llvm_unreachable("unknown attribute during serialization");
  });

  return pAttr;
}

MLIRArrayAttr AttributeSerializer::serializeMLIRArrayAttr(mlir::ArrayAttr attr) {
  MLIRArrayAttr serialized;
  for (auto i : attr.getValue()) {
    serialized.mutable_value()->Add(serializeMLIRAttribute(i));
  }
  return serialized;
}

MLIRDictionaryAttr AttributeSerializer::serializeMLIRDictionaryAttr(mlir::DictionaryAttr attr) {
  MLIRDictionaryAttr serialized;
  for (auto i : attr.getValue()) {
    serialized.mutable_value()->Add(serializeMLIRNamedAttr(i));
  }
  return serialized;
}

MLIRFloatAttr AttributeSerializer::serializeMLIRFloatAttr(mlir::FloatAttr attr) {
  MLIRFloatAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_value() = serializeAPFloat(attr.getValue());
  return serialized;
}

MLIRIntegerAttr AttributeSerializer::serializeMLIRIntegerAttr(mlir::IntegerAttr attr) {
  MLIRIntegerAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_value() = serializeAPInt(attr.getValue());
  return serialized;
}

MLIRStringAttr AttributeSerializer::serializeMLIRStringAttr(mlir::StringAttr attr) {
  MLIRStringAttr serialized;
  *serialized.mutable_value() = serializeStringRef(attr.getValue());
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  return serialized;
}

MLIRTypeAttr AttributeSerializer::serializeMLIRTypeAttr(mlir::TypeAttr attr) {
  MLIRTypeAttr serialized;
  *serialized.mutable_value() = typeCache.getMLIRTypeID(attr.getValue());
  return serialized;
}

MLIRUnitAttr AttributeSerializer::serializeMLIRUnitAttr(mlir::UnitAttr attr) {
  MLIRUnitAttr serialized;
  return serialized;
}

MLIRNamedAttr AttributeSerializer::serializeMLIRNamedAttr(mlir::NamedAttribute attr) {
  MLIRNamedAttr serialized;
  *serialized.mutable_name() = serializeMLIRStringAttr(attr.getName());
  *serialized.mutable_value() = serializeMLIRAttribute(attr.getValue());
  return serialized;
}

MLIRFlatSymbolRefAttr AttributeSerializer::serializeMLIRFlatSymbolRefAttr(mlir::FlatSymbolRefAttr attr) {
  MLIRFlatSymbolRefAttr serialized;
  *serialized.mutable_root_reference() = serializeMLIRStringAttr(attr.getRootReference());
  return serialized;
}

MLIRDenseI32ArrayAttr AttributeSerializer::serializeMLIRDenseI32ArrayAttr(mlir::DenseI32ArrayAttr attr) {
  MLIRDenseI32ArrayAttr serialized;
  serialized.set_size(attr.getSize());
  for (auto i : attr.getRawData()) {
    serialized.mutable_raw_data()->Add(i);
  }
  return serialized;
}

MLIRLocation AttributeSerializer::serializeMLIRLocation(mlir::Location attr) {
  MLIRLocation pAttr;

  llvm::TypeSwitch<mlir::Location>(attr)
  .Case<mlir::CallSiteLoc>([this, &pAttr](mlir::CallSiteLoc attr) {
    auto serialized = serializeMLIRCallSiteLoc(attr);
    pAttr.mutable_call_site_loc()->CopyFrom(serialized);
  })
  .Case<mlir::FileLineColLoc>([this, &pAttr](mlir::FileLineColLoc attr) {
    auto serialized = serializeMLIRFileLineColLoc(attr);
    pAttr.mutable_file_line_col_loc()->CopyFrom(serialized);
  })
  .Case<mlir::FusedLoc>([this, &pAttr](mlir::FusedLoc attr) {
    auto serialized = serializeMLIRFusedLoc(attr);
    pAttr.mutable_fused_loc()->CopyFrom(serialized);
  })
  .Case<mlir::NameLoc>([this, &pAttr](mlir::NameLoc attr) {
    auto serialized = serializeMLIRNameLoc(attr);
    pAttr.mutable_name_loc()->CopyFrom(serialized);
  })
  .Case<mlir::OpaqueLoc>([this, &pAttr](mlir::OpaqueLoc attr) {
    auto serialized = serializeMLIROpaqueLoc(attr);
    pAttr.mutable_opaque_loc()->CopyFrom(serialized);
  })
  .Case<mlir::UnknownLoc>([this, &pAttr](mlir::UnknownLoc attr) {
    auto serialized = serializeMLIRUnknownLoc(attr);
    pAttr.mutable_unknown_loc()->CopyFrom(serialized);
  })
  .Default([](mlir::Attribute attr) {
    attr.dump();
    llvm_unreachable("unknown attribute during serialization");
  });

  return pAttr;
}

MLIRCallSiteLoc AttributeSerializer::serializeMLIRCallSiteLoc(mlir::CallSiteLoc attr) {
  MLIRCallSiteLoc serialized;
  *serialized.mutable_callee() = serializeMLIRLocation(attr.getCallee());
  *serialized.mutable_caller() = serializeMLIRLocation(attr.getCaller());
  return serialized;
}

MLIRFileLineColLoc AttributeSerializer::serializeMLIRFileLineColLoc(mlir::FileLineColLoc attr) {
  MLIRFileLineColLoc serialized;
  *serialized.mutable_filename() = serializeMLIRStringAttr(attr.getFilename());
  serialized.set_line(attr.getLine());
  serialized.set_column(attr.getColumn());
  return serialized;
}

MLIRFusedLoc AttributeSerializer::serializeMLIRFusedLoc(mlir::FusedLoc attr) {
  MLIRFusedLoc serialized;
  for (auto i : attr.getLocations()) {
    serialized.mutable_locations()->Add(serializeMLIRLocation(i));
  }
  if (attr.getMetadata()) {
    *serialized.mutable_metadata() = serializeMLIRAttribute(attr.getMetadata());
  }
  return serialized;
}

MLIRNameLoc AttributeSerializer::serializeMLIRNameLoc(mlir::NameLoc attr) {
  MLIRNameLoc serialized;
  *serialized.mutable_name() = serializeMLIRStringAttr(attr.getName());
  *serialized.mutable_child_loc() = serializeMLIRLocation(attr.getChildLoc());
  return serialized;
}

MLIROpaqueLoc AttributeSerializer::serializeMLIROpaqueLoc(mlir::OpaqueLoc attr) {
  MLIROpaqueLoc serialized;
  *serialized.mutable_fallback_location() = serializeMLIRLocation(attr.getFallbackLocation());
  return serialized;
}

MLIRUnknownLoc AttributeSerializer::serializeMLIRUnknownLoc(mlir::UnknownLoc attr) {
  MLIRUnknownLoc serialized;
  return serialized;
}

CIRAddressSpaceAttr AttributeSerializer::serializeCIRAddressSpaceAttr(cir::AddressSpaceAttr attr) {
  CIRAddressSpaceAttr serialized;
  serialized.set_value(attr.getValue());
  return serialized;
}

CIRAnnotationAttr AttributeSerializer::serializeCIRAnnotationAttr(cir::AnnotationAttr attr) {
  CIRAnnotationAttr serialized;
  *serialized.mutable_name() = serializeMLIRStringAttr(attr.getName());
  *serialized.mutable_args() = serializeMLIRArrayAttr(attr.getArgs());
  return serialized;
}

CIRBitfieldInfoAttr AttributeSerializer::serializeCIRBitfieldInfoAttr(cir::BitfieldInfoAttr attr) {
  CIRBitfieldInfoAttr serialized;
  *serialized.mutable_name() = serializeMLIRStringAttr(attr.getName());
  *serialized.mutable_storage_type() = typeCache.getMLIRTypeID(attr.getStorageType());
  serialized.set_size(attr.getSize());
  serialized.set_offset(attr.getOffset());
  serialized.set_is_signed(attr.getIsSigned());
  return serialized;
}

CIRBoolAttr AttributeSerializer::serializeCIRBoolAttr(cir::BoolAttr attr) {
  CIRBoolAttr serialized;
  *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  serialized.set_value(attr.getValue());
  return serialized;
}

CIRTBAAAttr AttributeSerializer::serializeCIRTBAAAttr(cir::TBAAAttr attr) {
  CIRTBAAAttr serialized;
  return serialized;
}

CIRCmpThreeWayInfoAttr AttributeSerializer::serializeCIRCmpThreeWayInfoAttr(cir::CmpThreeWayInfoAttr attr) {
  CIRCmpThreeWayInfoAttr serialized;
  serialized.set_ordering(serializeCIRCmpOrdering(attr.getOrdering()));
  serialized.set_lt(attr.getLt());
  serialized.set_eq(attr.getEq());
  serialized.set_gt(attr.getGt());
  if (attr.getUnordered()) {
    serialized.set_unordered(*attr.getUnordered());
  }
  return serialized;
}

CIRComplexAttr AttributeSerializer::serializeCIRComplexAttr(cir::ComplexAttr attr) {
  CIRComplexAttr serialized;
  *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  *serialized.mutable_real() = serializeMLIRAttribute(attr.getReal());
  *serialized.mutable_imag() = serializeMLIRAttribute(attr.getImag());
  return serialized;
}

CIRConstArrayAttr AttributeSerializer::serializeCIRConstArrayAttr(cir::ConstArrayAttr attr) {
  CIRConstArrayAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_elts() = serializeMLIRAttribute(attr.getElts());
  serialized.set_trailing_zeros_num(attr.getTrailingZerosNum());
  return serialized;
}

CIRConstPtrAttr AttributeSerializer::serializeCIRConstPtrAttr(cir::ConstPtrAttr attr) {
  CIRConstPtrAttr serialized;
  *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  *serialized.mutable_value() = serializeMLIRIntegerAttr(attr.getValue());
  return serialized;
}

CIRConstStructAttr AttributeSerializer::serializeCIRConstStructAttr(cir::ConstStructAttr attr) {
  CIRConstStructAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_members() = serializeMLIRArrayAttr(attr.getMembers());
  return serialized;
}

CIRConstVectorAttr AttributeSerializer::serializeCIRConstVectorAttr(cir::ConstVectorAttr attr) {
  CIRConstVectorAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_elts() = serializeMLIRArrayAttr(attr.getElts());
  return serialized;
}

CIRConvergentAttr AttributeSerializer::serializeCIRConvergentAttr(cir::ConvergentAttr attr) {
  CIRConvergentAttr serialized;
  return serialized;
}

CIRDataMemberAttr AttributeSerializer::serializeCIRDataMemberAttr(cir::DataMemberAttr attr) {
  CIRDataMemberAttr serialized;
  *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  if (attr.getMemberIndex()) {
    serialized.set_member_index(*attr.getMemberIndex());
  }
  return serialized;
}

CIRDynamicCastInfoAttr AttributeSerializer::serializeCIRDynamicCastInfoAttr(cir::DynamicCastInfoAttr attr) {
  CIRDynamicCastInfoAttr serialized;
  *serialized.mutable_src_rtti() = serializeCIRGlobalViewAttr(attr.getSrcRtti());
  *serialized.mutable_dest_rtti() = serializeCIRGlobalViewAttr(attr.getDestRtti());
  *serialized.mutable_runtime_func() = serializeMLIRFlatSymbolRefAttr(attr.getRuntimeFunc());
  *serialized.mutable_bad_cast_func() = serializeMLIRFlatSymbolRefAttr(attr.getBadCastFunc());
  *serialized.mutable_offset_hint() = serializeCIRIntAttr(attr.getOffsetHint());
  return serialized;
}

CIRExtraFuncAttributesAttr AttributeSerializer::serializeCIRExtraFuncAttributesAttr(cir::ExtraFuncAttributesAttr attr) {
  CIRExtraFuncAttributesAttr serialized;
  *serialized.mutable_elements() = serializeMLIRDictionaryAttr(attr.getElements());
  return serialized;
}

CIRFPAttr AttributeSerializer::serializeCIRFPAttr(cir::FPAttr attr) {
  CIRFPAttr serialized;
  *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  *serialized.mutable_value() = serializeAPFloat(attr.getValue());
  return serialized;
}

CIRGlobalAnnotationValuesAttr AttributeSerializer::serializeCIRGlobalAnnotationValuesAttr(cir::GlobalAnnotationValuesAttr attr) {
  CIRGlobalAnnotationValuesAttr serialized;
  *serialized.mutable_annotations() = serializeMLIRArrayAttr(attr.getAnnotations());
  return serialized;
}

CIRGlobalCtorAttr AttributeSerializer::serializeCIRGlobalCtorAttr(cir::GlobalCtorAttr attr) {
  CIRGlobalCtorAttr serialized;
  *serialized.mutable_name() = serializeMLIRStringAttr(attr.getName());
  serialized.set_priority(attr.getPriority());
  return serialized;
}

CIRGlobalDtorAttr AttributeSerializer::serializeCIRGlobalDtorAttr(cir::GlobalDtorAttr attr) {
  CIRGlobalDtorAttr serialized;
  *serialized.mutable_name() = serializeMLIRStringAttr(attr.getName());
  serialized.set_priority(attr.getPriority());
  return serialized;
}

CIRGlobalViewAttr AttributeSerializer::serializeCIRGlobalViewAttr(cir::GlobalViewAttr attr) {
  CIRGlobalViewAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_symbol() = serializeMLIRFlatSymbolRefAttr(attr.getSymbol());
  if (attr.getIndices()) {
    *serialized.mutable_indices() = serializeMLIRArrayAttr(attr.getIndices());
  }
  return serialized;
}

CIRInactiveUnionFieldAttr AttributeSerializer::serializeCIRInactiveUnionFieldAttr(cir::InactiveUnionFieldAttr attr) {
  CIRInactiveUnionFieldAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  return serialized;
}

CIRInlineAttr AttributeSerializer::serializeCIRInlineAttr(cir::InlineAttr attr) {
  CIRInlineAttr serialized;
  serialized.set_value(serializeCIRInlineKind(attr.getValue()));
  return serialized;
}

CIRIntAttr AttributeSerializer::serializeCIRIntAttr(cir::IntAttr attr) {
  CIRIntAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_value() = serializeAPInt(attr.getValue());
  return serialized;
}

CIRLangAttr AttributeSerializer::serializeCIRLangAttr(cir::LangAttr attr) {
  CIRLangAttr serialized;
  serialized.set_lang(serializeCIRSourceLanguage(attr.getLang().getValue()));
  return serialized;
}

CIRMethodAttr AttributeSerializer::serializeCIRMethodAttr(cir::MethodAttr attr) {
  CIRMethodAttr serialized;
  *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  if (attr.getSymbol()) {
    *serialized.mutable_symbol() = serializeMLIRFlatSymbolRefAttr(*attr.getSymbol());
  }
  if (attr.getVtableOffset()) {
    serialized.set_vtable_offset(*attr.getVtableOffset());
  }
  return serialized;
}

CIRNoThrowAttr AttributeSerializer::serializeCIRNoThrowAttr(cir::NoThrowAttr attr) {
  CIRNoThrowAttr serialized;
  return serialized;
}

CIROpenCLKernelArgMetadataAttr AttributeSerializer::serializeCIROpenCLKernelArgMetadataAttr(cir::OpenCLKernelArgMetadataAttr attr) {
  CIROpenCLKernelArgMetadataAttr serialized;
  *serialized.mutable_addr_space() = serializeMLIRArrayAttr(attr.getAddrSpace());
  *serialized.mutable_access_qual() = serializeMLIRArrayAttr(attr.getAccessQual());
  *serialized.mutable_type() = serializeMLIRArrayAttr(attr.getType());
  *serialized.mutable_base_type() = serializeMLIRArrayAttr(attr.getBaseType());
  *serialized.mutable_type_qual() = serializeMLIRArrayAttr(attr.getTypeQual());
  if (attr.getName()) {
    *serialized.mutable_name() = serializeMLIRArrayAttr(attr.getName());
  }
  return serialized;
}

CIROpenCLKernelAttr AttributeSerializer::serializeCIROpenCLKernelAttr(cir::OpenCLKernelAttr attr) {
  CIROpenCLKernelAttr serialized;
  return serialized;
}

CIROpenCLKernelMetadataAttr AttributeSerializer::serializeCIROpenCLKernelMetadataAttr(cir::OpenCLKernelMetadataAttr attr) {
  CIROpenCLKernelMetadataAttr serialized;
  if (attr.getWorkGroupSizeHint()) {
    *serialized.mutable_work_group_size_hint() = serializeMLIRArrayAttr(attr.getWorkGroupSizeHint());
  }
  if (attr.getReqdWorkGroupSize()) {
    *serialized.mutable_reqd_work_group_size() = serializeMLIRArrayAttr(attr.getReqdWorkGroupSize());
  }
  if (attr.getVecTypeHint()) {
    *serialized.mutable_vec_type_hint() = serializeMLIRTypeAttr(attr.getVecTypeHint());
  }
  if (attr.getVecTypeHintSignedness()) {
    serialized.set_vec_type_hint_signedness(*attr.getVecTypeHintSignedness());
  }
  if (attr.getIntelReqdSubGroupSize()) {
    *serialized.mutable_intel_reqd_sub_group_size() = serializeMLIRIntegerAttr(attr.getIntelReqdSubGroupSize());
  }
  return serialized;
}

CIROpenCLKernelUniformWorkGroupSizeAttr AttributeSerializer::serializeCIROpenCLKernelUniformWorkGroupSizeAttr(cir::OpenCLKernelUniformWorkGroupSizeAttr attr) {
  CIROpenCLKernelUniformWorkGroupSizeAttr serialized;
  return serialized;
}

CIROpenCLVersionAttr AttributeSerializer::serializeCIROpenCLVersionAttr(cir::OpenCLVersionAttr attr) {
  CIROpenCLVersionAttr serialized;
  serialized.set_major_version(attr.getMajorVersion());
  serialized.set_minor_version(attr.getMinorVersion());
  return serialized;
}

CIROptNoneAttr AttributeSerializer::serializeCIROptNoneAttr(cir::OptNoneAttr attr) {
  CIROptNoneAttr serialized;
  return serialized;
}

CIRStructLayoutAttr AttributeSerializer::serializeCIRStructLayoutAttr(cir::StructLayoutAttr attr) {
  CIRStructLayoutAttr serialized;
  serialized.set_size(attr.getSize());
  serialized.set_alignment(attr.getAlignment());
  serialized.set_padded(attr.getPadded());
  *serialized.mutable_largest_member() = typeCache.getMLIRTypeID(attr.getLargestMember());
  *serialized.mutable_offsets() = serializeMLIRArrayAttr(attr.getOffsets());
  return serialized;
}

CIRTypeInfoAttr AttributeSerializer::serializeCIRTypeInfoAttr(cir::TypeInfoAttr attr) {
  CIRTypeInfoAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_data() = serializeMLIRArrayAttr(attr.getData());
  return serialized;
}

CIRUndefAttr AttributeSerializer::serializeCIRUndefAttr(cir::UndefAttr attr) {
  CIRUndefAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  return serialized;
}

CIRVTableAttr AttributeSerializer::serializeCIRVTableAttr(cir::VTableAttr attr) {
  CIRVTableAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  *serialized.mutable_vtable_data() = serializeMLIRArrayAttr(attr.getVtableData());
  return serialized;
}

CIRVisibilityAttr AttributeSerializer::serializeCIRVisibilityAttr(cir::VisibilityAttr attr) {
  CIRVisibilityAttr serialized;
  serialized.set_value(serializeCIRVisibilityKind(attr.getValue()));
  return serialized;
}

CIRZeroAttr AttributeSerializer::serializeCIRZeroAttr(cir::ZeroAttr attr) {
  CIRZeroAttr serialized;
  if (attr.getType()) {
    *serialized.mutable_type() = typeCache.getMLIRTypeID(attr.getType());
  }
  return serialized;
}

// clang-format on
