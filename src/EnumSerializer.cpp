/* Autogenerated by mlir-tblgen; don't manually edit. */
// clang-format off

#include "cir-tac/EnumSerializer.h"

#include <clang/CIR/Dialect/IR/CIRTypes.h>

using namespace protocir;

CIRAsmFlavor serializeCIRAsmFlavor(cir::AsmFlavor e) {
  switch (e) {
  case cir::AsmFlavor::x86_att:
    return CIRAsmFlavor::AsmFlavor_X86Att;
  case cir::AsmFlavor::x86_intel:
    return CIRAsmFlavor::AsmFlavor_X86Intel;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRAtomicFetchKind serializeCIRAtomicFetchKind(cir::AtomicFetchKind e) {
  switch (e) {
  case cir::AtomicFetchKind::Add:
    return CIRAtomicFetchKind::AtomicFetchKind_Add;
  case cir::AtomicFetchKind::Sub:
    return CIRAtomicFetchKind::AtomicFetchKind_Sub;
  case cir::AtomicFetchKind::And:
    return CIRAtomicFetchKind::AtomicFetchKind_And;
  case cir::AtomicFetchKind::Xor:
    return CIRAtomicFetchKind::AtomicFetchKind_Xor;
  case cir::AtomicFetchKind::Or:
    return CIRAtomicFetchKind::AtomicFetchKind_Or;
  case cir::AtomicFetchKind::Nand:
    return CIRAtomicFetchKind::AtomicFetchKind_Nand;
  case cir::AtomicFetchKind::Max:
    return CIRAtomicFetchKind::AtomicFetchKind_Max;
  case cir::AtomicFetchKind::Min:
    return CIRAtomicFetchKind::AtomicFetchKind_Min;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRAwaitKind serializeCIRAwaitKind(cir::AwaitKind e) {
  switch (e) {
  case cir::AwaitKind::init:
    return CIRAwaitKind::AwaitKind_Init;
  case cir::AwaitKind::user:
    return CIRAwaitKind::AwaitKind_User;
  case cir::AwaitKind::yield:
    return CIRAwaitKind::AwaitKind_Yield;
  case cir::AwaitKind::final:
    return CIRAwaitKind::AwaitKind_Final;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRBinOpKind serializeCIRBinOpKind(cir::BinOpKind e) {
  switch (e) {
  case cir::BinOpKind::Mul:
    return CIRBinOpKind::BinOpKind_Mul;
  case cir::BinOpKind::Div:
    return CIRBinOpKind::BinOpKind_Div;
  case cir::BinOpKind::Rem:
    return CIRBinOpKind::BinOpKind_Rem;
  case cir::BinOpKind::Add:
    return CIRBinOpKind::BinOpKind_Add;
  case cir::BinOpKind::Sub:
    return CIRBinOpKind::BinOpKind_Sub;
  case cir::BinOpKind::And:
    return CIRBinOpKind::BinOpKind_And;
  case cir::BinOpKind::Xor:
    return CIRBinOpKind::BinOpKind_Xor;
  case cir::BinOpKind::Or:
    return CIRBinOpKind::BinOpKind_Or;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRBinOpOverflowKind serializeCIRBinOpOverflowKind(cir::BinOpOverflowKind e) {
  switch (e) {
  case cir::BinOpOverflowKind::Add:
    return CIRBinOpOverflowKind::BinOpOverflowKind_Add;
  case cir::BinOpOverflowKind::Sub:
    return CIRBinOpOverflowKind::BinOpOverflowKind_Sub;
  case cir::BinOpOverflowKind::Mul:
    return CIRBinOpOverflowKind::BinOpOverflowKind_Mul;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRCallingConv serializeCIRCallingConv(cir::CallingConv e) {
  switch (e) {
  case cir::CallingConv::C:
    return CIRCallingConv::CallingConv_C;
  case cir::CallingConv::SpirKernel:
    return CIRCallingConv::CallingConv_SpirKernel;
  case cir::CallingConv::SpirFunction:
    return CIRCallingConv::CallingConv_SpirFunction;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRCaseOpKind serializeCIRCaseOpKind(cir::CaseOpKind e) {
  switch (e) {
  case cir::CaseOpKind::Default:
    return CIRCaseOpKind::CaseOpKind_Default;
  case cir::CaseOpKind::Equal:
    return CIRCaseOpKind::CaseOpKind_Equal;
  case cir::CaseOpKind::Anyof:
    return CIRCaseOpKind::CaseOpKind_Anyof;
  case cir::CaseOpKind::Range:
    return CIRCaseOpKind::CaseOpKind_Range;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRCastKind serializeCIRCastKind(cir::CastKind e) {
  switch (e) {
  case cir::CastKind::int_to_bool:
    return CIRCastKind::CastKind_IntToBool;
  case cir::CastKind::array_to_ptrdecay:
    return CIRCastKind::CastKind_ArrayToPtrdecay;
  case cir::CastKind::integral:
    return CIRCastKind::CastKind_Integral;
  case cir::CastKind::bitcast:
    return CIRCastKind::CastKind_Bitcast;
  case cir::CastKind::floating:
    return CIRCastKind::CastKind_Floating;
  case cir::CastKind::ptr_to_bool:
    return CIRCastKind::CastKind_PtrToBool;
  case cir::CastKind::float_to_int:
    return CIRCastKind::CastKind_FloatToInt;
  case cir::CastKind::int_to_ptr:
    return CIRCastKind::CastKind_IntToPtr;
  case cir::CastKind::ptr_to_int:
    return CIRCastKind::CastKind_PtrToInt;
  case cir::CastKind::float_to_bool:
    return CIRCastKind::CastKind_FloatToBool;
  case cir::CastKind::bool_to_int:
    return CIRCastKind::CastKind_BoolToInt;
  case cir::CastKind::int_to_float:
    return CIRCastKind::CastKind_IntToFloat;
  case cir::CastKind::bool_to_float:
    return CIRCastKind::CastKind_BoolToFloat;
  case cir::CastKind::address_space:
    return CIRCastKind::CastKind_AddressSpace;
  case cir::CastKind::float_to_complex:
    return CIRCastKind::CastKind_FloatToComplex;
  case cir::CastKind::int_to_complex:
    return CIRCastKind::CastKind_IntToComplex;
  case cir::CastKind::float_complex_to_real:
    return CIRCastKind::CastKind_FloatComplexToReal;
  case cir::CastKind::int_complex_to_real:
    return CIRCastKind::CastKind_IntComplexToReal;
  case cir::CastKind::float_complex_to_bool:
    return CIRCastKind::CastKind_FloatComplexToBool;
  case cir::CastKind::int_complex_to_bool:
    return CIRCastKind::CastKind_IntComplexToBool;
  case cir::CastKind::float_complex:
    return CIRCastKind::CastKind_FloatComplex;
  case cir::CastKind::float_complex_to_int_complex:
    return CIRCastKind::CastKind_FloatComplexToIntComplex;
  case cir::CastKind::int_complex:
    return CIRCastKind::CastKind_IntComplex;
  case cir::CastKind::int_complex_to_float_complex:
    return CIRCastKind::CastKind_IntComplexToFloatComplex;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRCatchParamKind serializeCIRCatchParamKind(cir::CatchParamKind e) {
  switch (e) {
  case cir::CatchParamKind::begin:
    return CIRCatchParamKind::CatchParamKind_Begin;
  case cir::CatchParamKind::end:
    return CIRCatchParamKind::CatchParamKind_End;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRCmpOpKind serializeCIRCmpOpKind(cir::CmpOpKind e) {
  switch (e) {
  case cir::CmpOpKind::lt:
    return CIRCmpOpKind::CmpOpKind_Lt;
  case cir::CmpOpKind::le:
    return CIRCmpOpKind::CmpOpKind_Le;
  case cir::CmpOpKind::gt:
    return CIRCmpOpKind::CmpOpKind_Gt;
  case cir::CmpOpKind::ge:
    return CIRCmpOpKind::CmpOpKind_Ge;
  case cir::CmpOpKind::eq:
    return CIRCmpOpKind::CmpOpKind_Eq;
  case cir::CmpOpKind::ne:
    return CIRCmpOpKind::CmpOpKind_Ne;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRCmpOrdering serializeCIRCmpOrdering(cir::CmpOrdering e) {
  switch (e) {
  case cir::CmpOrdering::Strong:
    return CIRCmpOrdering::CmpOrdering_Strong;
  case cir::CmpOrdering::Partial:
    return CIRCmpOrdering::CmpOrdering_Partial;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRComplexBinOpKind serializeCIRComplexBinOpKind(cir::ComplexBinOpKind e) {
  switch (e) {
  case cir::ComplexBinOpKind::Mul:
    return CIRComplexBinOpKind::ComplexBinOpKind_Mul;
  case cir::ComplexBinOpKind::Div:
    return CIRComplexBinOpKind::ComplexBinOpKind_Div;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRComplexRangeKind serializeCIRComplexRangeKind(cir::ComplexRangeKind e) {
  switch (e) {
  case cir::ComplexRangeKind::Full:
    return CIRComplexRangeKind::ComplexRangeKind_Full;
  case cir::ComplexRangeKind::Improved:
    return CIRComplexRangeKind::ComplexRangeKind_Improved;
  case cir::ComplexRangeKind::Promoted:
    return CIRComplexRangeKind::ComplexRangeKind_Promoted;
  case cir::ComplexRangeKind::Basic:
    return CIRComplexRangeKind::ComplexRangeKind_Basic;
  case cir::ComplexRangeKind::None:
    return CIRComplexRangeKind::ComplexRangeKind_None;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRDynamicCastKind serializeCIRDynamicCastKind(cir::DynamicCastKind e) {
  switch (e) {
  case cir::DynamicCastKind::ptr:
    return CIRDynamicCastKind::DynamicCastKind_Ptr;
  case cir::DynamicCastKind::ref:
    return CIRDynamicCastKind::DynamicCastKind_Ref;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRGlobalLinkageKind serializeCIRGlobalLinkageKind(cir::GlobalLinkageKind e) {
  switch (e) {
  case cir::GlobalLinkageKind::ExternalLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_ExternalLinkage;
  case cir::GlobalLinkageKind::AvailableExternallyLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_AvailableExternallyLinkage;
  case cir::GlobalLinkageKind::LinkOnceAnyLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceAnyLinkage;
  case cir::GlobalLinkageKind::LinkOnceODRLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_LinkOnceODRLinkage;
  case cir::GlobalLinkageKind::WeakAnyLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_WeakAnyLinkage;
  case cir::GlobalLinkageKind::WeakODRLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_WeakODRLinkage;
  case cir::GlobalLinkageKind::InternalLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_InternalLinkage;
  case cir::GlobalLinkageKind::PrivateLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_PrivateLinkage;
  case cir::GlobalLinkageKind::ExternalWeakLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_ExternalWeakLinkage;
  case cir::GlobalLinkageKind::CommonLinkage:
    return CIRGlobalLinkageKind::GlobalLinkageKind_CommonLinkage;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRInlineKind serializeCIRInlineKind(cir::InlineKind e) {
  switch (e) {
  case cir::InlineKind::NoInline:
    return CIRInlineKind::InlineKind_NoInline;
  case cir::InlineKind::AlwaysInline:
    return CIRInlineKind::InlineKind_AlwaysInline;
  case cir::InlineKind::InlineHint:
    return CIRInlineKind::InlineKind_InlineHint;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRMemOrder serializeCIRMemOrder(cir::MemOrder e) {
  switch (e) {
  case cir::MemOrder::Relaxed:
    return CIRMemOrder::MemOrder_Relaxed;
  case cir::MemOrder::Consume:
    return CIRMemOrder::MemOrder_Consume;
  case cir::MemOrder::Acquire:
    return CIRMemOrder::MemOrder_Acquire;
  case cir::MemOrder::Release:
    return CIRMemOrder::MemOrder_Release;
  case cir::MemOrder::AcquireRelease:
    return CIRMemOrder::MemOrder_AcquireRelease;
  case cir::MemOrder::SequentiallyConsistent:
    return CIRMemOrder::MemOrder_SequentiallyConsistent;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRSignedOverflowBehavior serializeCIRSignedOverflowBehavior(cir::sob::SignedOverflowBehavior e) {
  switch (e) {
  case cir::sob::SignedOverflowBehavior::undefined:
    return CIRSignedOverflowBehavior::SignedOverflowBehavior_Undefined;
  case cir::sob::SignedOverflowBehavior::defined:
    return CIRSignedOverflowBehavior::SignedOverflowBehavior_Defined;
  case cir::sob::SignedOverflowBehavior::trapping:
    return CIRSignedOverflowBehavior::SignedOverflowBehavior_Trapping;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRSizeInfoType serializeCIRSizeInfoType(cir::SizeInfoType e) {
  switch (e) {
  case cir::SizeInfoType::min:
    return CIRSizeInfoType::SizeInfoType_Min;
  case cir::SizeInfoType::max:
    return CIRSizeInfoType::SizeInfoType_Max;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRSourceLanguage serializeCIRSourceLanguage(cir::SourceLanguage e) {
  switch (e) {
  case cir::SourceLanguage::C:
    return CIRSourceLanguage::SourceLanguage_C;
  case cir::SourceLanguage::CXX:
    return CIRSourceLanguage::SourceLanguage_CXX;
  case cir::SourceLanguage::OpenCLC:
    return CIRSourceLanguage::SourceLanguage_OpenCLC;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRTLSModel serializeCIRTLSModel(cir::TLS_Model e) {
  switch (e) {
  case cir::TLS_Model::GeneralDynamic:
    return CIRTLSModel::TLSModel_GeneralDynamic;
  case cir::TLS_Model::LocalDynamic:
    return CIRTLSModel::TLSModel_LocalDynamic;
  case cir::TLS_Model::InitialExec:
    return CIRTLSModel::TLSModel_InitialExec;
  case cir::TLS_Model::LocalExec:
    return CIRTLSModel::TLSModel_LocalExec;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRUnaryOpKind serializeCIRUnaryOpKind(cir::UnaryOpKind e) {
  switch (e) {
  case cir::UnaryOpKind::Inc:
    return CIRUnaryOpKind::UnaryOpKind_Inc;
  case cir::UnaryOpKind::Dec:
    return CIRUnaryOpKind::UnaryOpKind_Dec;
  case cir::UnaryOpKind::Plus:
    return CIRUnaryOpKind::UnaryOpKind_Plus;
  case cir::UnaryOpKind::Minus:
    return CIRUnaryOpKind::UnaryOpKind_Minus;
  case cir::UnaryOpKind::Not:
    return CIRUnaryOpKind::UnaryOpKind_Not;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRVisibilityKind serializeCIRVisibilityKind(cir::VisibilityKind e) {
  switch (e) {
  case cir::VisibilityKind::Default:
    return CIRVisibilityKind::VisibilityKind_Default;
  case cir::VisibilityKind::Hidden:
    return CIRVisibilityKind::VisibilityKind_Hidden;
  case cir::VisibilityKind::Protected:
    return CIRVisibilityKind::VisibilityKind_Protected;
  default:
    assert(0 && "Unknown enum variant");
  }
}

CIRRecordKind serializeCIRRecordKind(cir::StructType::RecordKind e) {
  switch (e) {
  case cir::StructType::RecordKind::Class:
    return CIRRecordKind::CIRRecordKind_Class;
  case cir::StructType::RecordKind::Union:
    return CIRRecordKind::CIRRecordKind_Union;
  case cir::StructType::RecordKind::Struct:
    return CIRRecordKind::CIRRecordKind_Struct;
  default:
    assert(0 && "Unknown enum variant");
  }
}

// clang-format on
