/* Autogenerated by mlir-tblgen; don't manually edit. */
// clang-format off

#include "cir-tac/OpSerializer.h"
#include "cir-tac/EnumSerializer.h"

#include <llvm/ADT/TypeSwitch.h>

using namespace protocir;

MLIROp OpSerializer::serializeOperation(mlir::Operation &op) {
  MLIROp pOp;
  *pOp.mutable_location() = attributeSerializer.serializeMLIRLocation(op.getLoc());

  llvm::TypeSwitch<mlir::Operation *>(&op)
  .Case<cir::AbsOp>([this, &pOp](cir::AbsOp op) {
    auto serialized = serializeAbsOp(op);
    *pOp.mutable_abs_op() = serialized;
  })
  .Case<cir::AllocExceptionOp>([this, &pOp](cir::AllocExceptionOp op) {
    auto serialized = serializeAllocExceptionOp(op);
    *pOp.mutable_alloc_exception_op() = serialized;
  })
  .Case<cir::AllocaOp>([this, &pOp](cir::AllocaOp op) {
    auto serialized = serializeAllocaOp(op);
    *pOp.mutable_alloca_op() = serialized;
  })
  .Case<cir::ArrayCtor>([this, &pOp](cir::ArrayCtor op) {
    auto serialized = serializeArrayCtorOp(op);
    *pOp.mutable_array_ctor_op() = serialized;
  })
  .Case<cir::ArrayDtor>([this, &pOp](cir::ArrayDtor op) {
    auto serialized = serializeArrayDtorOp(op);
    *pOp.mutable_array_dtor_op() = serialized;
  })
  .Case<cir::AssumeAlignedOp>([this, &pOp](cir::AssumeAlignedOp op) {
    auto serialized = serializeAssumeAlignedOp(op);
    *pOp.mutable_assume_aligned_op() = serialized;
  })
  .Case<cir::AssumeOp>([this, &pOp](cir::AssumeOp op) {
    auto serialized = serializeAssumeOp(op);
    *pOp.mutable_assume_op() = serialized;
  })
  .Case<cir::AssumeSepStorageOp>([this, &pOp](cir::AssumeSepStorageOp op) {
    auto serialized = serializeAssumeSepStorageOp(op);
    *pOp.mutable_assume_sep_storage_op() = serialized;
  })
  .Case<cir::AtomicCmpXchg>([this, &pOp](cir::AtomicCmpXchg op) {
    auto serialized = serializeAtomicCmpXchgOp(op);
    *pOp.mutable_atomic_cmp_xchg_op() = serialized;
  })
  .Case<cir::AtomicFetch>([this, &pOp](cir::AtomicFetch op) {
    auto serialized = serializeAtomicFetchOp(op);
    *pOp.mutable_atomic_fetch_op() = serialized;
  })
  .Case<cir::AtomicXchg>([this, &pOp](cir::AtomicXchg op) {
    auto serialized = serializeAtomicXchgOp(op);
    *pOp.mutable_atomic_xchg_op() = serialized;
  })
  .Case<cir::AwaitOp>([this, &pOp](cir::AwaitOp op) {
    auto serialized = serializeAwaitOp(op);
    *pOp.mutable_await_op() = serialized;
  })
  .Case<cir::BaseClassAddrOp>([this, &pOp](cir::BaseClassAddrOp op) {
    auto serialized = serializeBaseClassAddrOp(op);
    *pOp.mutable_base_class_addr_op() = serialized;
  })
  .Case<cir::BinOp>([this, &pOp](cir::BinOp op) {
    auto serialized = serializeBinOp(op);
    *pOp.mutable_bin_op() = serialized;
  })
  .Case<cir::BinOpOverflowOp>([this, &pOp](cir::BinOpOverflowOp op) {
    auto serialized = serializeBinOpOverflowOp(op);
    *pOp.mutable_bin_op_overflow_op() = serialized;
  })
  .Case<cir::BitClrsbOp>([this, &pOp](cir::BitClrsbOp op) {
    auto serialized = serializeBitClrsbOp(op);
    *pOp.mutable_bit_clrsb_op() = serialized;
  })
  .Case<cir::BitClzOp>([this, &pOp](cir::BitClzOp op) {
    auto serialized = serializeBitClzOp(op);
    *pOp.mutable_bit_clz_op() = serialized;
  })
  .Case<cir::BitCtzOp>([this, &pOp](cir::BitCtzOp op) {
    auto serialized = serializeBitCtzOp(op);
    *pOp.mutable_bit_ctz_op() = serialized;
  })
  .Case<cir::BitFfsOp>([this, &pOp](cir::BitFfsOp op) {
    auto serialized = serializeBitFfsOp(op);
    *pOp.mutable_bit_ffs_op() = serialized;
  })
  .Case<cir::BitParityOp>([this, &pOp](cir::BitParityOp op) {
    auto serialized = serializeBitParityOp(op);
    *pOp.mutable_bit_parity_op() = serialized;
  })
  .Case<cir::BitPopcountOp>([this, &pOp](cir::BitPopcountOp op) {
    auto serialized = serializeBitPopcountOp(op);
    *pOp.mutable_bit_popcount_op() = serialized;
  })
  .Case<cir::BrCondOp>([this, &pOp](cir::BrCondOp op) {
    auto serialized = serializeBrCondOp(op);
    *pOp.mutable_br_cond_op() = serialized;
  })
  .Case<cir::BrOp>([this, &pOp](cir::BrOp op) {
    auto serialized = serializeBrOp(op);
    *pOp.mutable_br_op() = serialized;
  })
  .Case<cir::BreakOp>([this, &pOp](cir::BreakOp op) {
    auto serialized = serializeBreakOp(op);
    *pOp.mutable_break_op() = serialized;
  })
  .Case<cir::ByteswapOp>([this, &pOp](cir::ByteswapOp op) {
    auto serialized = serializeByteswapOp(op);
    *pOp.mutable_byteswap_op() = serialized;
  })
  .Case<cir::InlineAsmOp>([this, &pOp](cir::InlineAsmOp op) {
    auto serialized = serializeInlineAsmOp(op);
    *pOp.mutable_inline_asm_op() = serialized;
  })
  .Case<cir::CallOp>([this, &pOp](cir::CallOp op) {
    auto serialized = serializeCallOp(op);
    *pOp.mutable_call_op() = serialized;
  })
  .Case<cir::CaseOp>([this, &pOp](cir::CaseOp op) {
    auto serialized = serializeCaseOp(op);
    *pOp.mutable_case_op() = serialized;
  })
  .Case<cir::CastOp>([this, &pOp](cir::CastOp op) {
    auto serialized = serializeCastOp(op);
    *pOp.mutable_cast_op() = serialized;
  })
  .Case<cir::CatchParamOp>([this, &pOp](cir::CatchParamOp op) {
    auto serialized = serializeCatchParamOp(op);
    *pOp.mutable_catch_param_op() = serialized;
  })
  .Case<cir::CeilOp>([this, &pOp](cir::CeilOp op) {
    auto serialized = serializeCeilOp(op);
    *pOp.mutable_ceil_op() = serialized;
  })
  .Case<cir::ClearCacheOp>([this, &pOp](cir::ClearCacheOp op) {
    auto serialized = serializeClearCacheOp(op);
    *pOp.mutable_clear_cache_op() = serialized;
  })
  .Case<cir::CmpOp>([this, &pOp](cir::CmpOp op) {
    auto serialized = serializeCmpOp(op);
    *pOp.mutable_cmp_op() = serialized;
  })
  .Case<cir::CmpThreeWayOp>([this, &pOp](cir::CmpThreeWayOp op) {
    auto serialized = serializeCmpThreeWayOp(op);
    *pOp.mutable_cmp_three_way_op() = serialized;
  })
  .Case<cir::ComplexBinOp>([this, &pOp](cir::ComplexBinOp op) {
    auto serialized = serializeComplexBinOp(op);
    *pOp.mutable_complex_bin_op() = serialized;
  })
  .Case<cir::ComplexCreateOp>([this, &pOp](cir::ComplexCreateOp op) {
    auto serialized = serializeComplexCreateOp(op);
    *pOp.mutable_complex_create_op() = serialized;
  })
  .Case<cir::ComplexImagOp>([this, &pOp](cir::ComplexImagOp op) {
    auto serialized = serializeComplexImagOp(op);
    *pOp.mutable_complex_imag_op() = serialized;
  })
  .Case<cir::ComplexImagPtrOp>([this, &pOp](cir::ComplexImagPtrOp op) {
    auto serialized = serializeComplexImagPtrOp(op);
    *pOp.mutable_complex_imag_ptr_op() = serialized;
  })
  .Case<cir::ComplexRealOp>([this, &pOp](cir::ComplexRealOp op) {
    auto serialized = serializeComplexRealOp(op);
    *pOp.mutable_complex_real_op() = serialized;
  })
  .Case<cir::ComplexRealPtrOp>([this, &pOp](cir::ComplexRealPtrOp op) {
    auto serialized = serializeComplexRealPtrOp(op);
    *pOp.mutable_complex_real_ptr_op() = serialized;
  })
  .Case<cir::ConditionOp>([this, &pOp](cir::ConditionOp op) {
    auto serialized = serializeConditionOp(op);
    *pOp.mutable_condition_op() = serialized;
  })
  .Case<cir::ConstantOp>([this, &pOp](cir::ConstantOp op) {
    auto serialized = serializeConstantOp(op);
    *pOp.mutable_constant_op() = serialized;
  })
  .Case<cir::ContinueOp>([this, &pOp](cir::ContinueOp op) {
    auto serialized = serializeContinueOp(op);
    *pOp.mutable_continue_op() = serialized;
  })
  .Case<cir::CopyOp>([this, &pOp](cir::CopyOp op) {
    auto serialized = serializeCopyOp(op);
    *pOp.mutable_copy_op() = serialized;
  })
  .Case<cir::CopysignOp>([this, &pOp](cir::CopysignOp op) {
    auto serialized = serializeCopysignOp(op);
    *pOp.mutable_copysign_op() = serialized;
  })
  .Case<cir::CosOp>([this, &pOp](cir::CosOp op) {
    auto serialized = serializeCosOp(op);
    *pOp.mutable_cos_op() = serialized;
  })
  .Case<cir::DerivedClassAddrOp>([this, &pOp](cir::DerivedClassAddrOp op) {
    auto serialized = serializeDerivedClassAddrOp(op);
    *pOp.mutable_derived_class_addr_op() = serialized;
  })
  .Case<cir::DoWhileOp>([this, &pOp](cir::DoWhileOp op) {
    auto serialized = serializeDoWhileOp(op);
    *pOp.mutable_do_while_op() = serialized;
  })
  .Case<cir::DynamicCastOp>([this, &pOp](cir::DynamicCastOp op) {
    auto serialized = serializeDynamicCastOp(op);
    *pOp.mutable_dynamic_cast_op() = serialized;
  })
  .Case<cir::EhInflightOp>([this, &pOp](cir::EhInflightOp op) {
    auto serialized = serializeEhInflightOp(op);
    *pOp.mutable_eh_inflight_op() = serialized;
  })
  .Case<cir::EhTypeIdOp>([this, &pOp](cir::EhTypeIdOp op) {
    auto serialized = serializeEhTypeIdOp(op);
    *pOp.mutable_eh_type_id_op() = serialized;
  })
  .Case<cir::Exp2Op>([this, &pOp](cir::Exp2Op op) {
    auto serialized = serializeExp2Op(op);
    *pOp.mutable_exp2_op() = serialized;
  })
  .Case<cir::ExpOp>([this, &pOp](cir::ExpOp op) {
    auto serialized = serializeExpOp(op);
    *pOp.mutable_exp_op() = serialized;
  })
  .Case<cir::ExpectOp>([this, &pOp](cir::ExpectOp op) {
    auto serialized = serializeExpectOp(op);
    *pOp.mutable_expect_op() = serialized;
  })
  .Case<cir::FAbsOp>([this, &pOp](cir::FAbsOp op) {
    auto serialized = serializeFAbsOp(op);
    *pOp.mutable_f_abs_op() = serialized;
  })
  .Case<cir::FMaxOp>([this, &pOp](cir::FMaxOp op) {
    auto serialized = serializeFMaxOp(op);
    *pOp.mutable_f_max_op() = serialized;
  })
  .Case<cir::FMinOp>([this, &pOp](cir::FMinOp op) {
    auto serialized = serializeFMinOp(op);
    *pOp.mutable_f_min_op() = serialized;
  })
  .Case<cir::FModOp>([this, &pOp](cir::FModOp op) {
    auto serialized = serializeFModOp(op);
    *pOp.mutable_f_mod_op() = serialized;
  })
  .Case<cir::FloorOp>([this, &pOp](cir::FloorOp op) {
    auto serialized = serializeFloorOp(op);
    *pOp.mutable_floor_op() = serialized;
  })
  .Case<cir::ForOp>([this, &pOp](cir::ForOp op) {
    auto serialized = serializeForOp(op);
    *pOp.mutable_for_op() = serialized;
  })
  .Case<cir::FrameAddrOp>([this, &pOp](cir::FrameAddrOp op) {
    auto serialized = serializeFrameAddrOp(op);
    *pOp.mutable_frame_addr_op() = serialized;
  })
  .Case<cir::FreeExceptionOp>([this, &pOp](cir::FreeExceptionOp op) {
    auto serialized = serializeFreeExceptionOp(op);
    *pOp.mutable_free_exception_op() = serialized;
  })
  .Case<cir::FuncOp>([this, &pOp](cir::FuncOp op) {
    auto serialized = serializeFuncOp(op);
    *pOp.mutable_func_op() = serialized;
  })
  .Case<cir::GetBitfieldOp>([this, &pOp](cir::GetBitfieldOp op) {
    auto serialized = serializeGetBitfieldOp(op);
    *pOp.mutable_get_bitfield_op() = serialized;
  })
  .Case<cir::GetGlobalOp>([this, &pOp](cir::GetGlobalOp op) {
    auto serialized = serializeGetGlobalOp(op);
    *pOp.mutable_get_global_op() = serialized;
  })
  .Case<cir::GetMemberOp>([this, &pOp](cir::GetMemberOp op) {
    auto serialized = serializeGetMemberOp(op);
    *pOp.mutable_get_member_op() = serialized;
  })
  .Case<cir::GetMethodOp>([this, &pOp](cir::GetMethodOp op) {
    auto serialized = serializeGetMethodOp(op);
    *pOp.mutable_get_method_op() = serialized;
  })
  .Case<cir::GetRuntimeMemberOp>([this, &pOp](cir::GetRuntimeMemberOp op) {
    auto serialized = serializeGetRuntimeMemberOp(op);
    *pOp.mutable_get_runtime_member_op() = serialized;
  })
  .Case<cir::GlobalOp>([this, &pOp](cir::GlobalOp op) {
    auto serialized = serializeGlobalOp(op);
    *pOp.mutable_global_op() = serialized;
  })
  .Case<cir::GotoOp>([this, &pOp](cir::GotoOp op) {
    auto serialized = serializeGotoOp(op);
    *pOp.mutable_goto_op() = serialized;
  })
  .Case<cir::IfOp>([this, &pOp](cir::IfOp op) {
    auto serialized = serializeIfOp(op);
    *pOp.mutable_if_op() = serialized;
  })
  .Case<cir::IsConstantOp>([this, &pOp](cir::IsConstantOp op) {
    auto serialized = serializeIsConstantOp(op);
    *pOp.mutable_is_constant_op() = serialized;
  })
  .Case<cir::IsFPClassOp>([this, &pOp](cir::IsFPClassOp op) {
    auto serialized = serializeIsFPClassOp(op);
    *pOp.mutable_is_fp_class_op() = serialized;
  })
  .Case<cir::IterBeginOp>([this, &pOp](cir::IterBeginOp op) {
    auto serialized = serializeIterBeginOp(op);
    *pOp.mutable_iter_begin_op() = serialized;
  })
  .Case<cir::IterEndOp>([this, &pOp](cir::IterEndOp op) {
    auto serialized = serializeIterEndOp(op);
    *pOp.mutable_iter_end_op() = serialized;
  })
  .Case<cir::LLVMIntrinsicCallOp>([this, &pOp](cir::LLVMIntrinsicCallOp op) {
    auto serialized = serializeLLVMIntrinsicCallOp(op);
    *pOp.mutable_llvm_intrinsic_call_op() = serialized;
  })
  .Case<cir::LLrintOp>([this, &pOp](cir::LLrintOp op) {
    auto serialized = serializeLLrintOp(op);
    *pOp.mutable_l_lrint_op() = serialized;
  })
  .Case<cir::LLroundOp>([this, &pOp](cir::LLroundOp op) {
    auto serialized = serializeLLroundOp(op);
    *pOp.mutable_l_lround_op() = serialized;
  })
  .Case<cir::LabelOp>([this, &pOp](cir::LabelOp op) {
    auto serialized = serializeLabelOp(op);
    *pOp.mutable_label_op() = serialized;
  })
  .Case<cir::LoadOp>([this, &pOp](cir::LoadOp op) {
    auto serialized = serializeLoadOp(op);
    *pOp.mutable_load_op() = serialized;
  })
  .Case<cir::Log10Op>([this, &pOp](cir::Log10Op op) {
    auto serialized = serializeLog10Op(op);
    *pOp.mutable_log10_op() = serialized;
  })
  .Case<cir::Log2Op>([this, &pOp](cir::Log2Op op) {
    auto serialized = serializeLog2Op(op);
    *pOp.mutable_log2_op() = serialized;
  })
  .Case<cir::LogOp>([this, &pOp](cir::LogOp op) {
    auto serialized = serializeLogOp(op);
    *pOp.mutable_log_op() = serialized;
  })
  .Case<cir::LrintOp>([this, &pOp](cir::LrintOp op) {
    auto serialized = serializeLrintOp(op);
    *pOp.mutable_lrint_op() = serialized;
  })
  .Case<cir::LroundOp>([this, &pOp](cir::LroundOp op) {
    auto serialized = serializeLroundOp(op);
    *pOp.mutable_lround_op() = serialized;
  })
  .Case<cir::MemChrOp>([this, &pOp](cir::MemChrOp op) {
    auto serialized = serializeMemChrOp(op);
    *pOp.mutable_mem_chr_op() = serialized;
  })
  .Case<cir::MemCpyInlineOp>([this, &pOp](cir::MemCpyInlineOp op) {
    auto serialized = serializeMemCpyInlineOp(op);
    *pOp.mutable_mem_cpy_inline_op() = serialized;
  })
  .Case<cir::MemCpyOp>([this, &pOp](cir::MemCpyOp op) {
    auto serialized = serializeMemCpyOp(op);
    *pOp.mutable_mem_cpy_op() = serialized;
  })
  .Case<cir::MemMoveOp>([this, &pOp](cir::MemMoveOp op) {
    auto serialized = serializeMemMoveOp(op);
    *pOp.mutable_mem_move_op() = serialized;
  })
  .Case<cir::MemSetInlineOp>([this, &pOp](cir::MemSetInlineOp op) {
    auto serialized = serializeMemSetInlineOp(op);
    *pOp.mutable_mem_set_inline_op() = serialized;
  })
  .Case<cir::MemSetOp>([this, &pOp](cir::MemSetOp op) {
    auto serialized = serializeMemSetOp(op);
    *pOp.mutable_mem_set_op() = serialized;
  })
  .Case<cir::NearbyintOp>([this, &pOp](cir::NearbyintOp op) {
    auto serialized = serializeNearbyintOp(op);
    *pOp.mutable_nearbyint_op() = serialized;
  })
  .Case<cir::ObjSizeOp>([this, &pOp](cir::ObjSizeOp op) {
    auto serialized = serializeObjSizeOp(op);
    *pOp.mutable_obj_size_op() = serialized;
  })
  .Case<cir::PowOp>([this, &pOp](cir::PowOp op) {
    auto serialized = serializePowOp(op);
    *pOp.mutable_pow_op() = serialized;
  })
  .Case<cir::PrefetchOp>([this, &pOp](cir::PrefetchOp op) {
    auto serialized = serializePrefetchOp(op);
    *pOp.mutable_prefetch_op() = serialized;
  })
  .Case<cir::PtrDiffOp>([this, &pOp](cir::PtrDiffOp op) {
    auto serialized = serializePtrDiffOp(op);
    *pOp.mutable_ptr_diff_op() = serialized;
  })
  .Case<cir::PtrMaskOp>([this, &pOp](cir::PtrMaskOp op) {
    auto serialized = serializePtrMaskOp(op);
    *pOp.mutable_ptr_mask_op() = serialized;
  })
  .Case<cir::PtrStrideOp>([this, &pOp](cir::PtrStrideOp op) {
    auto serialized = serializePtrStrideOp(op);
    *pOp.mutable_ptr_stride_op() = serialized;
  })
  .Case<cir::ResumeOp>([this, &pOp](cir::ResumeOp op) {
    auto serialized = serializeResumeOp(op);
    *pOp.mutable_resume_op() = serialized;
  })
  .Case<cir::ReturnAddrOp>([this, &pOp](cir::ReturnAddrOp op) {
    auto serialized = serializeReturnAddrOp(op);
    *pOp.mutable_return_addr_op() = serialized;
  })
  .Case<cir::ReturnOp>([this, &pOp](cir::ReturnOp op) {
    auto serialized = serializeReturnOp(op);
    *pOp.mutable_return_op() = serialized;
  })
  .Case<cir::RintOp>([this, &pOp](cir::RintOp op) {
    auto serialized = serializeRintOp(op);
    *pOp.mutable_rint_op() = serialized;
  })
  .Case<cir::RotateOp>([this, &pOp](cir::RotateOp op) {
    auto serialized = serializeRotateOp(op);
    *pOp.mutable_rotate_op() = serialized;
  })
  .Case<cir::RoundOp>([this, &pOp](cir::RoundOp op) {
    auto serialized = serializeRoundOp(op);
    *pOp.mutable_round_op() = serialized;
  })
  .Case<cir::ScopeOp>([this, &pOp](cir::ScopeOp op) {
    auto serialized = serializeScopeOp(op);
    *pOp.mutable_scope_op() = serialized;
  })
  .Case<cir::SelectOp>([this, &pOp](cir::SelectOp op) {
    auto serialized = serializeSelectOp(op);
    *pOp.mutable_select_op() = serialized;
  })
  .Case<cir::SetBitfieldOp>([this, &pOp](cir::SetBitfieldOp op) {
    auto serialized = serializeSetBitfieldOp(op);
    *pOp.mutable_set_bitfield_op() = serialized;
  })
  .Case<cir::ShiftOp>([this, &pOp](cir::ShiftOp op) {
    auto serialized = serializeShiftOp(op);
    *pOp.mutable_shift_op() = serialized;
  })
  .Case<cir::SignBitOp>([this, &pOp](cir::SignBitOp op) {
    auto serialized = serializeSignBitOp(op);
    *pOp.mutable_sign_bit_op() = serialized;
  })
  .Case<cir::SinOp>([this, &pOp](cir::SinOp op) {
    auto serialized = serializeSinOp(op);
    *pOp.mutable_sin_op() = serialized;
  })
  .Case<cir::SqrtOp>([this, &pOp](cir::SqrtOp op) {
    auto serialized = serializeSqrtOp(op);
    *pOp.mutable_sqrt_op() = serialized;
  })
  .Case<cir::StackRestoreOp>([this, &pOp](cir::StackRestoreOp op) {
    auto serialized = serializeStackRestoreOp(op);
    *pOp.mutable_stack_restore_op() = serialized;
  })
  .Case<cir::StackSaveOp>([this, &pOp](cir::StackSaveOp op) {
    auto serialized = serializeStackSaveOp(op);
    *pOp.mutable_stack_save_op() = serialized;
  })
  .Case<cir::StdFindOp>([this, &pOp](cir::StdFindOp op) {
    auto serialized = serializeStdFindOp(op);
    *pOp.mutable_std_find_op() = serialized;
  })
  .Case<cir::StdInitializerListOp>([this, &pOp](cir::StdInitializerListOp op) {
    auto serialized = serializeStdInitializerListOp(op);
    *pOp.mutable_std_initializer_list_op() = serialized;
  })
  .Case<cir::StoreOp>([this, &pOp](cir::StoreOp op) {
    auto serialized = serializeStoreOp(op);
    *pOp.mutable_store_op() = serialized;
  })
  .Case<cir::SwitchFlatOp>([this, &pOp](cir::SwitchFlatOp op) {
    auto serialized = serializeSwitchFlatOp(op);
    *pOp.mutable_switch_flat_op() = serialized;
  })
  .Case<cir::SwitchOp>([this, &pOp](cir::SwitchOp op) {
    auto serialized = serializeSwitchOp(op);
    *pOp.mutable_switch_op() = serialized;
  })
  .Case<cir::TernaryOp>([this, &pOp](cir::TernaryOp op) {
    auto serialized = serializeTernaryOp(op);
    *pOp.mutable_ternary_op() = serialized;
  })
  .Case<cir::ThrowOp>([this, &pOp](cir::ThrowOp op) {
    auto serialized = serializeThrowOp(op);
    *pOp.mutable_throw_op() = serialized;
  })
  .Case<cir::TrapOp>([this, &pOp](cir::TrapOp op) {
    auto serialized = serializeTrapOp(op);
    *pOp.mutable_trap_op() = serialized;
  })
  .Case<cir::TruncOp>([this, &pOp](cir::TruncOp op) {
    auto serialized = serializeTruncOp(op);
    *pOp.mutable_trunc_op() = serialized;
  })
  .Case<cir::TryCallOp>([this, &pOp](cir::TryCallOp op) {
    auto serialized = serializeTryCallOp(op);
    *pOp.mutable_try_call_op() = serialized;
  })
  .Case<cir::TryOp>([this, &pOp](cir::TryOp op) {
    auto serialized = serializeTryOp(op);
    *pOp.mutable_try_op() = serialized;
  })
  .Case<cir::UnaryOp>([this, &pOp](cir::UnaryOp op) {
    auto serialized = serializeUnaryOp(op);
    *pOp.mutable_unary_op() = serialized;
  })
  .Case<cir::UnreachableOp>([this, &pOp](cir::UnreachableOp op) {
    auto serialized = serializeUnreachableOp(op);
    *pOp.mutable_unreachable_op() = serialized;
  })
  .Case<cir::VAArgOp>([this, &pOp](cir::VAArgOp op) {
    auto serialized = serializeVAArgOp(op);
    *pOp.mutable_va_arg_op() = serialized;
  })
  .Case<cir::VACopyOp>([this, &pOp](cir::VACopyOp op) {
    auto serialized = serializeVACopyOp(op);
    *pOp.mutable_va_copy_op() = serialized;
  })
  .Case<cir::VAEndOp>([this, &pOp](cir::VAEndOp op) {
    auto serialized = serializeVAEndOp(op);
    *pOp.mutable_va_end_op() = serialized;
  })
  .Case<cir::VAStartOp>([this, &pOp](cir::VAStartOp op) {
    auto serialized = serializeVAStartOp(op);
    *pOp.mutable_va_start_op() = serialized;
  })
  .Case<cir::VTTAddrPointOp>([this, &pOp](cir::VTTAddrPointOp op) {
    auto serialized = serializeVTTAddrPointOp(op);
    *pOp.mutable_vtt_addr_point_op() = serialized;
  })
  .Case<cir::VTableAddrPointOp>([this, &pOp](cir::VTableAddrPointOp op) {
    auto serialized = serializeVTableAddrPointOp(op);
    *pOp.mutable_v_table_addr_point_op() = serialized;
  })
  .Case<cir::VecCmpOp>([this, &pOp](cir::VecCmpOp op) {
    auto serialized = serializeVecCmpOp(op);
    *pOp.mutable_vec_cmp_op() = serialized;
  })
  .Case<cir::VecCreateOp>([this, &pOp](cir::VecCreateOp op) {
    auto serialized = serializeVecCreateOp(op);
    *pOp.mutable_vec_create_op() = serialized;
  })
  .Case<cir::VecExtractOp>([this, &pOp](cir::VecExtractOp op) {
    auto serialized = serializeVecExtractOp(op);
    *pOp.mutable_vec_extract_op() = serialized;
  })
  .Case<cir::VecInsertOp>([this, &pOp](cir::VecInsertOp op) {
    auto serialized = serializeVecInsertOp(op);
    *pOp.mutable_vec_insert_op() = serialized;
  })
  .Case<cir::VecShuffleDynamicOp>([this, &pOp](cir::VecShuffleDynamicOp op) {
    auto serialized = serializeVecShuffleDynamicOp(op);
    *pOp.mutable_vec_shuffle_dynamic_op() = serialized;
  })
  .Case<cir::VecShuffleOp>([this, &pOp](cir::VecShuffleOp op) {
    auto serialized = serializeVecShuffleOp(op);
    *pOp.mutable_vec_shuffle_op() = serialized;
  })
  .Case<cir::VecSplatOp>([this, &pOp](cir::VecSplatOp op) {
    auto serialized = serializeVecSplatOp(op);
    *pOp.mutable_vec_splat_op() = serialized;
  })
  .Case<cir::VecTernaryOp>([this, &pOp](cir::VecTernaryOp op) {
    auto serialized = serializeVecTernaryOp(op);
    *pOp.mutable_vec_ternary_op() = serialized;
  })
  .Case<cir::WhileOp>([this, &pOp](cir::WhileOp op) {
    auto serialized = serializeWhileOp(op);
    *pOp.mutable_while_op() = serialized;
  })
  .Case<cir::YieldOp>([this, &pOp](cir::YieldOp op) {
    auto serialized = serializeYieldOp(op);
    *pOp.mutable_yield_op() = serialized;
  })
  .Default([](mlir::Operation *op) {
    op->dump();
    llvm_unreachable("unknown operation during serialization");
  });

  return pOp;
}

CIRAbsOp OpSerializer::serializeAbsOp(cir::AbsOp op) {
  CIRAbsOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  if (op.getPoisonAttr()) {
    *serialized.mutable_poison() = attributeSerializer.serializeMLIRUnitAttr(op.getPoisonAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRAllocExceptionOp OpSerializer::serializeAllocExceptionOp(cir::AllocExceptionOp op) {
  CIRAllocExceptionOp serialized;

  *serialized.mutable_size() = attributeSerializer.serializeMLIRIntegerAttr(op.getSizeAttr());

  *serialized.mutable_addr() = typeCache.getMLIRTypeID(op.getAddr().getType());

  return serialized;
}

CIRAllocaOp OpSerializer::serializeAllocaOp(cir::AllocaOp op) {
  CIRAllocaOp serialized;

  if (op.getDynAllocSize()) {
    *serialized.mutable_dyn_alloc_size() = serializeValue(op.getDynAllocSize());
  }

  *serialized.mutable_alloca_type() = attributeSerializer.serializeMLIRTypeAttr(op.getAllocaTypeAttr());
  *serialized.mutable_name() = attributeSerializer.serializeMLIRStringAttr(op.getNameAttr());
  if (op.getInitAttr()) {
    *serialized.mutable_init() = attributeSerializer.serializeMLIRUnitAttr(op.getInitAttr());
  }
  if (op.getConstantAttr()) {
    *serialized.mutable_constant() = attributeSerializer.serializeMLIRUnitAttr(op.getConstantAttr());
  }
  if (op.getAlignmentAttr()) {
    *serialized.mutable_alignment() = attributeSerializer.serializeMLIRIntegerAttr(op.getAlignmentAttr());
  }
  if (op.getAnnotationsAttr()) {
    *serialized.mutable_annotations() = attributeSerializer.serializeMLIRArrayAttr(op.getAnnotationsAttr());
  }

  *serialized.mutable_addr() = typeCache.getMLIRTypeID(op.getAddr().getType());

  return serialized;
}

CIRArrayCtorOp OpSerializer::serializeArrayCtorOp(cir::ArrayCtor op) {
  CIRArrayCtorOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());

  return serialized;
}

CIRArrayDtorOp OpSerializer::serializeArrayDtorOp(cir::ArrayDtor op) {
  CIRArrayDtorOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());

  return serialized;
}

CIRAssumeAlignedOp OpSerializer::serializeAssumeAlignedOp(cir::AssumeAlignedOp op) {
  CIRAssumeAlignedOp serialized;

  *serialized.mutable_pointer() = serializeValue(op.getPointer());
  if (op.getOffset()) {
    *serialized.mutable_offset() = serializeValue(op.getOffset());
  }

  *serialized.mutable_alignment() = attributeSerializer.serializeMLIRIntegerAttr(op.getAlignmentAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRAssumeOp OpSerializer::serializeAssumeOp(cir::AssumeOp op) {
  CIRAssumeOp serialized;

  *serialized.mutable_predicate() = serializeValue(op.getPredicate());

  return serialized;
}

CIRAssumeSepStorageOp OpSerializer::serializeAssumeSepStorageOp(cir::AssumeSepStorageOp op) {
  CIRAssumeSepStorageOp serialized;

  *serialized.mutable_ptr1() = serializeValue(op.getPtr1());
  *serialized.mutable_ptr2() = serializeValue(op.getPtr2());

  return serialized;
}

CIRAtomicCmpXchgOp OpSerializer::serializeAtomicCmpXchgOp(cir::AtomicCmpXchg op) {
  CIRAtomicCmpXchgOp serialized;

  *serialized.mutable_ptr() = serializeValue(op.getPtr());
  *serialized.mutable_expected() = serializeValue(op.getExpected());
  *serialized.mutable_desired() = serializeValue(op.getDesired());

  serialized.set_succ_order(serializeCIRMemOrder(op.getSuccOrder()));
  serialized.set_fail_order(serializeCIRMemOrder(op.getFailOrder()));
  if (op.getWeakAttr()) {
    *serialized.mutable_weak() = attributeSerializer.serializeMLIRUnitAttr(op.getWeakAttr());
  }
  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }

  *serialized.mutable_old() = typeCache.getMLIRTypeID(op.getOld().getType());
  *serialized.mutable_cmp() = typeCache.getMLIRTypeID(op.getCmp().getType());

  return serialized;
}

CIRAtomicFetchOp OpSerializer::serializeAtomicFetchOp(cir::AtomicFetch op) {
  CIRAtomicFetchOp serialized;

  *serialized.mutable_ptr() = serializeValue(op.getPtr());
  *serialized.mutable_val() = serializeValue(op.getVal());

  serialized.set_binop(serializeCIRAtomicFetchKind(op.getBinop()));
  serialized.set_mem_order(serializeCIRMemOrder(op.getMemOrder()));
  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }
  if (op.getFetchFirstAttr()) {
    *serialized.mutable_fetch_first() = attributeSerializer.serializeMLIRUnitAttr(op.getFetchFirstAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRAtomicXchgOp OpSerializer::serializeAtomicXchgOp(cir::AtomicXchg op) {
  CIRAtomicXchgOp serialized;

  *serialized.mutable_ptr() = serializeValue(op.getPtr());
  *serialized.mutable_val() = serializeValue(op.getVal());

  serialized.set_mem_order(serializeCIRMemOrder(op.getMemOrder()));
  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRAwaitOp OpSerializer::serializeAwaitOp(cir::AwaitOp op) {
  CIRAwaitOp serialized;

  serialized.set_kind(serializeCIRAwaitKind(op.getKind()));

  return serialized;
}

CIRBaseClassAddrOp OpSerializer::serializeBaseClassAddrOp(cir::BaseClassAddrOp op) {
  CIRBaseClassAddrOp serialized;

  *serialized.mutable_derived_addr() = serializeValue(op.getDerivedAddr());

  *serialized.mutable_offset() = attributeSerializer.serializeMLIRIntegerAttr(op.getOffsetAttr());
  if (op.getAssumeNotNullAttr()) {
    *serialized.mutable_assume_not_null() = attributeSerializer.serializeMLIRUnitAttr(op.getAssumeNotNullAttr());
  }

  *serialized.mutable_base_addr() = typeCache.getMLIRTypeID(op.getBaseAddr().getType());

  return serialized;
}

CIRBinOp OpSerializer::serializeBinOp(cir::BinOp op) {
  CIRBinOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  serialized.set_kind(serializeCIRBinOpKind(op.getKind()));
  if (op.getNoUnsignedWrapAttr()) {
    *serialized.mutable_no_unsigned_wrap() = attributeSerializer.serializeMLIRUnitAttr(op.getNoUnsignedWrapAttr());
  }
  if (op.getNoSignedWrapAttr()) {
    *serialized.mutable_no_signed_wrap() = attributeSerializer.serializeMLIRUnitAttr(op.getNoSignedWrapAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRBinOpOverflowOp OpSerializer::serializeBinOpOverflowOp(cir::BinOpOverflowOp op) {
  CIRBinOpOverflowOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  serialized.set_kind(serializeCIRBinOpOverflowKind(op.getKind()));

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());
  *serialized.mutable_overflow() = typeCache.getMLIRTypeID(op.getOverflow().getType());

  return serialized;
}

CIRBitClrsbOp OpSerializer::serializeBitClrsbOp(cir::BitClrsbOp op) {
  CIRBitClrsbOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRBitClzOp OpSerializer::serializeBitClzOp(cir::BitClzOp op) {
  CIRBitClzOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRBitCtzOp OpSerializer::serializeBitCtzOp(cir::BitCtzOp op) {
  CIRBitCtzOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRBitFfsOp OpSerializer::serializeBitFfsOp(cir::BitFfsOp op) {
  CIRBitFfsOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRBitParityOp OpSerializer::serializeBitParityOp(cir::BitParityOp op) {
  CIRBitParityOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRBitPopcountOp OpSerializer::serializeBitPopcountOp(cir::BitPopcountOp op) {
  CIRBitPopcountOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRBrCondOp OpSerializer::serializeBrCondOp(cir::BrCondOp op) {
  CIRBrCondOp serialized;

  *serialized.mutable_cond() = serializeValue(op.getCond());
  for (auto v : op.getDestOperandsTrue()) {
    auto protoV = serialized.add_dest_operands_true();
    *protoV = serializeValue(v);
  }
  for (auto v : op.getDestOperandsFalse()) {
    auto protoV = serialized.add_dest_operands_false();
    *protoV = serializeValue(v);
  }

  *serialized.mutable_dest_true() = blockCache.getMLIRBlockID(op.getDestTrue());
  *serialized.mutable_dest_false() = blockCache.getMLIRBlockID(op.getDestFalse());

  return serialized;
}

CIRBrOp OpSerializer::serializeBrOp(cir::BrOp op) {
  CIRBrOp serialized;

  for (auto v : op.getDestOperands()) {
    auto protoV = serialized.add_dest_operands();
    *protoV = serializeValue(v);
  }

  *serialized.mutable_dest() = blockCache.getMLIRBlockID(op.getDest());

  return serialized;
}

CIRBreakOp OpSerializer::serializeBreakOp(cir::BreakOp op) {
  CIRBreakOp serialized;

  return serialized;
}

CIRByteswapOp OpSerializer::serializeByteswapOp(cir::ByteswapOp op) {
  CIRByteswapOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRInlineAsmOp OpSerializer::serializeInlineAsmOp(cir::InlineAsmOp op) {
  CIRInlineAsmOp serialized;

  for (auto v : op.getOperands()) {
    auto protoV = serialized.add_operands();
    for (auto vv : v) {
      auto protoVV = protoV->add_list();
      *protoVV = serializeValue(vv);
    }
  }

  *serialized.mutable_asm_string() = attributeSerializer.serializeMLIRStringAttr(op.getAsmStringAttr());
  *serialized.mutable_constraints() = attributeSerializer.serializeMLIRStringAttr(op.getConstraintsAttr());
  if (op.getSideEffectsAttr()) {
    *serialized.mutable_side_effects() = attributeSerializer.serializeMLIRUnitAttr(op.getSideEffectsAttr());
  }
  serialized.set_asm_flavor(serializeCIRAsmFlavor(op.getAsmFlavor()));
  *serialized.mutable_operand_attrs() = attributeSerializer.serializeMLIRArrayAttr(op.getOperandAttrsAttr());
  *serialized.mutable_operands_segments() = attributeSerializer.serializeMLIRDenseI32ArrayAttr(op.getOperandsSegmentsAttr());

  if (op.getRes()) {
    *serialized.mutable_res() = typeCache.getMLIRTypeID(op.getRes().getType());
  }

  return serialized;
}

CIRCallOp OpSerializer::serializeCallOp(cir::CallOp op) {
  CIRCallOp serialized;

  for (auto v : op.getArgOps()) {
    auto protoV = serialized.add_arg_ops();
    *protoV = serializeValue(v);
  }

  if (op.getExceptionAttr()) {
    *serialized.mutable_exception() = attributeSerializer.serializeMLIRUnitAttr(op.getExceptionAttr());
  }
  if (op.getCalleeAttr()) {
    *serialized.mutable_callee() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getCalleeAttr());
  }
  serialized.set_calling_conv(serializeCIRCallingConv(op.getCallingConv()));
  *serialized.mutable_extra_attrs() = attributeSerializer.serializeCIRExtraFuncAttributesAttr(op.getExtraAttrsAttr());

  if (op.getResult()) {
    *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());
  }

  return serialized;
}

CIRCaseOp OpSerializer::serializeCaseOp(cir::CaseOp op) {
  CIRCaseOp serialized;

  *serialized.mutable_value() = attributeSerializer.serializeMLIRArrayAttr(op.getValueAttr());
  serialized.set_kind(serializeCIRCaseOpKind(op.getKind()));

  return serialized;
}

CIRCastOp OpSerializer::serializeCastOp(cir::CastOp op) {
  CIRCastOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  serialized.set_kind(serializeCIRCastKind(op.getKind()));

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRCatchParamOp OpSerializer::serializeCatchParamOp(cir::CatchParamOp op) {
  CIRCatchParamOp serialized;

  if (op.getExceptionPtr()) {
    *serialized.mutable_exception_ptr() = serializeValue(op.getExceptionPtr());
  }

  if (op.getKind()) {
    serialized.set_kind(serializeCIRCatchParamKind(*op.getKind()));
  }

  if (op.getParam()) {
    *serialized.mutable_param() = typeCache.getMLIRTypeID(op.getParam().getType());
  }

  return serialized;
}

CIRCeilOp OpSerializer::serializeCeilOp(cir::CeilOp op) {
  CIRCeilOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRClearCacheOp OpSerializer::serializeClearCacheOp(cir::ClearCacheOp op) {
  CIRClearCacheOp serialized;

  *serialized.mutable_begin() = serializeValue(op.getBegin());
  *serialized.mutable_end() = serializeValue(op.getEnd());

  return serialized;
}

CIRCmpOp OpSerializer::serializeCmpOp(cir::CmpOp op) {
  CIRCmpOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  serialized.set_kind(serializeCIRCmpOpKind(op.getKind()));

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRCmpThreeWayOp OpSerializer::serializeCmpThreeWayOp(cir::CmpThreeWayOp op) {
  CIRCmpThreeWayOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  *serialized.mutable_info() = attributeSerializer.serializeCIRCmpThreeWayInfoAttr(op.getInfoAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRComplexBinOp OpSerializer::serializeComplexBinOp(cir::ComplexBinOp op) {
  CIRComplexBinOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  serialized.set_kind(serializeCIRComplexBinOpKind(op.getKind()));
  serialized.set_range(serializeCIRComplexRangeKind(op.getRange()));
  if (op.getPromotedAttr()) {
    *serialized.mutable_promoted() = attributeSerializer.serializeMLIRUnitAttr(op.getPromotedAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRComplexCreateOp OpSerializer::serializeComplexCreateOp(cir::ComplexCreateOp op) {
  CIRComplexCreateOp serialized;

  *serialized.mutable_real() = serializeValue(op.getReal());
  *serialized.mutable_imag() = serializeValue(op.getImag());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRComplexImagOp OpSerializer::serializeComplexImagOp(cir::ComplexImagOp op) {
  CIRComplexImagOp serialized;

  *serialized.mutable_operand() = serializeValue(op.getOperand());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRComplexImagPtrOp OpSerializer::serializeComplexImagPtrOp(cir::ComplexImagPtrOp op) {
  CIRComplexImagPtrOp serialized;

  *serialized.mutable_operand() = serializeValue(op.getOperand());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRComplexRealOp OpSerializer::serializeComplexRealOp(cir::ComplexRealOp op) {
  CIRComplexRealOp serialized;

  *serialized.mutable_operand() = serializeValue(op.getOperand());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRComplexRealPtrOp OpSerializer::serializeComplexRealPtrOp(cir::ComplexRealPtrOp op) {
  CIRComplexRealPtrOp serialized;

  *serialized.mutable_operand() = serializeValue(op.getOperand());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRConditionOp OpSerializer::serializeConditionOp(cir::ConditionOp op) {
  CIRConditionOp serialized;

  *serialized.mutable_condition() = serializeValue(op.getCondition());

  return serialized;
}

CIRConstantOp OpSerializer::serializeConstantOp(cir::ConstantOp op) {
  CIRConstantOp serialized;

  *serialized.mutable_value() = attributeSerializer.serializeMLIRAttribute(op.getValueAttr());

  *serialized.mutable_res() = typeCache.getMLIRTypeID(op.getRes().getType());

  return serialized;
}

CIRContinueOp OpSerializer::serializeContinueOp(cir::ContinueOp op) {
  CIRContinueOp serialized;

  return serialized;
}

CIRCopyOp OpSerializer::serializeCopyOp(cir::CopyOp op) {
  CIRCopyOp serialized;

  *serialized.mutable_dst() = serializeValue(op.getDst());
  *serialized.mutable_src() = serializeValue(op.getSrc());

  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }
  if (op.getTbaaAttr()) {
    *serialized.mutable_tbaa() = attributeSerializer.serializeMLIRArrayAttr(op.getTbaaAttr());
  }

  return serialized;
}

CIRCopysignOp OpSerializer::serializeCopysignOp(cir::CopysignOp op) {
  CIRCopysignOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRCosOp OpSerializer::serializeCosOp(cir::CosOp op) {
  CIRCosOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRDerivedClassAddrOp OpSerializer::serializeDerivedClassAddrOp(cir::DerivedClassAddrOp op) {
  CIRDerivedClassAddrOp serialized;

  *serialized.mutable_base_addr() = serializeValue(op.getBaseAddr());

  *serialized.mutable_offset() = attributeSerializer.serializeMLIRIntegerAttr(op.getOffsetAttr());
  if (op.getAssumeNotNullAttr()) {
    *serialized.mutable_assume_not_null() = attributeSerializer.serializeMLIRUnitAttr(op.getAssumeNotNullAttr());
  }

  *serialized.mutable_derived_addr() = typeCache.getMLIRTypeID(op.getDerivedAddr().getType());

  return serialized;
}

CIRDoWhileOp OpSerializer::serializeDoWhileOp(cir::DoWhileOp op) {
  CIRDoWhileOp serialized;

  return serialized;
}

CIRDynamicCastOp OpSerializer::serializeDynamicCastOp(cir::DynamicCastOp op) {
  CIRDynamicCastOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  serialized.set_kind(serializeCIRDynamicCastKind(op.getKind()));
  if (op.getInfoAttr()) {
    *serialized.mutable_info() = attributeSerializer.serializeCIRDynamicCastInfoAttr(op.getInfoAttr());
  }
  if (op.getRelativeLayoutAttr()) {
    *serialized.mutable_relative_layout() = attributeSerializer.serializeMLIRUnitAttr(op.getRelativeLayoutAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIREhInflightOp OpSerializer::serializeEhInflightOp(cir::EhInflightOp op) {
  CIREhInflightOp serialized;

  if (op.getCleanupAttr()) {
    *serialized.mutable_cleanup() = attributeSerializer.serializeMLIRUnitAttr(op.getCleanupAttr());
  }
  if (op.getSymTypeListAttr()) {
    *serialized.mutable_sym_type_list() = attributeSerializer.serializeMLIRArrayAttr(op.getSymTypeListAttr());
  }

  *serialized.mutable_exception_ptr() = typeCache.getMLIRTypeID(op.getExceptionPtr().getType());
  *serialized.mutable_type_id() = typeCache.getMLIRTypeID(op.getTypeId().getType());

  return serialized;
}

CIREhTypeIdOp OpSerializer::serializeEhTypeIdOp(cir::EhTypeIdOp op) {
  CIREhTypeIdOp serialized;

  *serialized.mutable_type_sym() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getTypeSymAttr());

  *serialized.mutable_type_id() = typeCache.getMLIRTypeID(op.getTypeId().getType());

  return serialized;
}

CIRExp2Op OpSerializer::serializeExp2Op(cir::Exp2Op op) {
  CIRExp2Op serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRExpOp OpSerializer::serializeExpOp(cir::ExpOp op) {
  CIRExpOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRExpectOp OpSerializer::serializeExpectOp(cir::ExpectOp op) {
  CIRExpectOp serialized;

  *serialized.mutable_val() = serializeValue(op.getVal());
  *serialized.mutable_expected() = serializeValue(op.getExpected());

  if (op.getProbAttr()) {
    *serialized.mutable_prob() = attributeSerializer.serializeMLIRFloatAttr(op.getProbAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRFAbsOp OpSerializer::serializeFAbsOp(cir::FAbsOp op) {
  CIRFAbsOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRFMaxOp OpSerializer::serializeFMaxOp(cir::FMaxOp op) {
  CIRFMaxOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRFMinOp OpSerializer::serializeFMinOp(cir::FMinOp op) {
  CIRFMinOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRFModOp OpSerializer::serializeFModOp(cir::FModOp op) {
  CIRFModOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRFloorOp OpSerializer::serializeFloorOp(cir::FloorOp op) {
  CIRFloorOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRForOp OpSerializer::serializeForOp(cir::ForOp op) {
  CIRForOp serialized;

  return serialized;
}

CIRFrameAddrOp OpSerializer::serializeFrameAddrOp(cir::FrameAddrOp op) {
  CIRFrameAddrOp serialized;

  *serialized.mutable_level() = serializeValue(op.getLevel());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRFreeExceptionOp OpSerializer::serializeFreeExceptionOp(cir::FreeExceptionOp op) {
  CIRFreeExceptionOp serialized;

  *serialized.mutable_ptr() = serializeValue(op.getPtr());

  return serialized;
}

CIRFuncOp OpSerializer::serializeFuncOp(cir::FuncOp op) {
  CIRFuncOp serialized;

  *serialized.mutable_sym_name() = attributeSerializer.serializeMLIRStringAttr(op.getSymNameAttr());
  *serialized.mutable_global_visibility() = attributeSerializer.serializeCIRVisibilityAttr(op.getGlobalVisibilityAttr());
  *serialized.mutable_function_type() = attributeSerializer.serializeMLIRTypeAttr(op.getFunctionTypeAttr());
  if (op.getBuiltinAttr()) {
    *serialized.mutable_builtin() = attributeSerializer.serializeMLIRUnitAttr(op.getBuiltinAttr());
  }
  if (op.getCoroutineAttr()) {
    *serialized.mutable_coroutine() = attributeSerializer.serializeMLIRUnitAttr(op.getCoroutineAttr());
  }
  if (op.getLambdaAttr()) {
    *serialized.mutable_lambda() = attributeSerializer.serializeMLIRUnitAttr(op.getLambdaAttr());
  }
  if (op.getNoProtoAttr()) {
    *serialized.mutable_no_proto() = attributeSerializer.serializeMLIRUnitAttr(op.getNoProtoAttr());
  }
  if (op.getDsolocalAttr()) {
    *serialized.mutable_dsolocal() = attributeSerializer.serializeMLIRUnitAttr(op.getDsolocalAttr());
  }
  serialized.set_linkage(serializeCIRGlobalLinkageKind(op.getLinkage()));
  serialized.set_calling_conv(serializeCIRCallingConv(op.getCallingConv()));
  *serialized.mutable_extra_attrs() = attributeSerializer.serializeCIRExtraFuncAttributesAttr(op.getExtraAttrsAttr());
  if (op.getSymVisibilityAttr()) {
    *serialized.mutable_sym_visibility() = attributeSerializer.serializeMLIRStringAttr(op.getSymVisibilityAttr());
  }
  if (op.getComdatAttr()) {
    *serialized.mutable_comdat() = attributeSerializer.serializeMLIRUnitAttr(op.getComdatAttr());
  }
  if (op.getArgAttrsAttr()) {
    *serialized.mutable_arg_attrs() = attributeSerializer.serializeMLIRArrayAttr(op.getArgAttrsAttr());
  }
  if (op.getResAttrsAttr()) {
    *serialized.mutable_res_attrs() = attributeSerializer.serializeMLIRArrayAttr(op.getResAttrsAttr());
  }
  if (op.getAliaseeAttr()) {
    *serialized.mutable_aliasee() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getAliaseeAttr());
  }
  if (op.getGlobalCtorAttr()) {
    *serialized.mutable_global_ctor() = attributeSerializer.serializeCIRGlobalCtorAttr(op.getGlobalCtorAttr());
  }
  if (op.getGlobalDtorAttr()) {
    *serialized.mutable_global_dtor() = attributeSerializer.serializeCIRGlobalDtorAttr(op.getGlobalDtorAttr());
  }
  if (op.getAnnotationsAttr()) {
    *serialized.mutable_annotations() = attributeSerializer.serializeMLIRArrayAttr(op.getAnnotationsAttr());
  }
  if (op.getAstAttr()) {
    *serialized.mutable_ast() = attributeSerializer.serializeMLIRAttribute(op.getAstAttr());
  }

  return serialized;
}

CIRGetBitfieldOp OpSerializer::serializeGetBitfieldOp(cir::GetBitfieldOp op) {
  CIRGetBitfieldOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());

  *serialized.mutable_bitfield_info() = attributeSerializer.serializeCIRBitfieldInfoAttr(op.getBitfieldInfoAttr());
  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRGetGlobalOp OpSerializer::serializeGetGlobalOp(cir::GetGlobalOp op) {
  CIRGetGlobalOp serialized;

  *serialized.mutable_name() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getNameAttr());
  if (op.getTlsAttr()) {
    *serialized.mutable_tls() = attributeSerializer.serializeMLIRUnitAttr(op.getTlsAttr());
  }

  *serialized.mutable_addr() = typeCache.getMLIRTypeID(op.getAddr().getType());

  return serialized;
}

CIRGetMemberOp OpSerializer::serializeGetMemberOp(cir::GetMemberOp op) {
  CIRGetMemberOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());

  *serialized.mutable_name() = attributeSerializer.serializeMLIRStringAttr(op.getNameAttr());
  *serialized.mutable_index_attr() = attributeSerializer.serializeMLIRIntegerAttr(op.getIndexAttrAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRGetMethodOp OpSerializer::serializeGetMethodOp(cir::GetMethodOp op) {
  CIRGetMethodOp serialized;

  *serialized.mutable_method() = serializeValue(op.getMethod());
  *serialized.mutable_object() = serializeValue(op.getObject());

  *serialized.mutable_callee() = typeCache.getMLIRTypeID(op.getCallee().getType());
  *serialized.mutable_adjusted_this() = typeCache.getMLIRTypeID(op.getAdjustedThis().getType());

  return serialized;
}

CIRGetRuntimeMemberOp OpSerializer::serializeGetRuntimeMemberOp(cir::GetRuntimeMemberOp op) {
  CIRGetRuntimeMemberOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());
  *serialized.mutable_member() = serializeValue(op.getMember());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRGlobalOp OpSerializer::serializeGlobalOp(cir::GlobalOp op) {
  CIRGlobalOp serialized;

  *serialized.mutable_sym_name() = attributeSerializer.serializeMLIRStringAttr(op.getSymNameAttr());
  *serialized.mutable_global_visibility() = attributeSerializer.serializeCIRVisibilityAttr(op.getGlobalVisibilityAttr());
  if (op.getSymVisibilityAttr()) {
    *serialized.mutable_sym_visibility() = attributeSerializer.serializeMLIRStringAttr(op.getSymVisibilityAttr());
  }
  *serialized.mutable_sym_type() = attributeSerializer.serializeMLIRTypeAttr(op.getSymTypeAttr());
  serialized.set_linkage(serializeCIRGlobalLinkageKind(op.getLinkage()));
  if (op.getAddrSpaceAttr()) {
    *serialized.mutable_addr_space() = attributeSerializer.serializeCIRAddressSpaceAttr(op.getAddrSpaceAttr());
  }
  if (op.getTlsModel()) {
    serialized.set_tls_model(serializeCIRTLSModel(*op.getTlsModel()));
  }
  if (op.getInitialValueAttr()) {
    *serialized.mutable_initial_value() = attributeSerializer.serializeMLIRAttribute(op.getInitialValueAttr());
  }
  if (op.getComdatAttr()) {
    *serialized.mutable_comdat() = attributeSerializer.serializeMLIRUnitAttr(op.getComdatAttr());
  }
  if (op.getConstantAttr()) {
    *serialized.mutable_constant() = attributeSerializer.serializeMLIRUnitAttr(op.getConstantAttr());
  }
  if (op.getDsolocalAttr()) {
    *serialized.mutable_dsolocal() = attributeSerializer.serializeMLIRUnitAttr(op.getDsolocalAttr());
  }
  if (op.getAlignmentAttr()) {
    *serialized.mutable_alignment() = attributeSerializer.serializeMLIRIntegerAttr(op.getAlignmentAttr());
  }
  if (op.getSectionAttr()) {
    *serialized.mutable_section() = attributeSerializer.serializeMLIRStringAttr(op.getSectionAttr());
  }
  if (op.getAnnotationsAttr()) {
    *serialized.mutable_annotations() = attributeSerializer.serializeMLIRArrayAttr(op.getAnnotationsAttr());
  }

  return serialized;
}

CIRGotoOp OpSerializer::serializeGotoOp(cir::GotoOp op) {
  CIRGotoOp serialized;

  *serialized.mutable_label() = attributeSerializer.serializeMLIRStringAttr(op.getLabelAttr());

  return serialized;
}

CIRIfOp OpSerializer::serializeIfOp(cir::IfOp op) {
  CIRIfOp serialized;

  *serialized.mutable_condition() = serializeValue(op.getCondition());

  return serialized;
}

CIRIsConstantOp OpSerializer::serializeIsConstantOp(cir::IsConstantOp op) {
  CIRIsConstantOp serialized;

  *serialized.mutable_val() = serializeValue(op.getVal());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRIsFPClassOp OpSerializer::serializeIsFPClassOp(cir::IsFPClassOp op) {
  CIRIsFPClassOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_flags() = attributeSerializer.serializeMLIRIntegerAttr(op.getFlagsAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRIterBeginOp OpSerializer::serializeIterBeginOp(cir::IterBeginOp op) {
  CIRIterBeginOp serialized;

  *serialized.mutable_container() = serializeValue(op.getContainer());

  *serialized.mutable_original_fn() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getOriginalFnAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRIterEndOp OpSerializer::serializeIterEndOp(cir::IterEndOp op) {
  CIRIterEndOp serialized;

  *serialized.mutable_container() = serializeValue(op.getContainer());

  *serialized.mutable_original_fn() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getOriginalFnAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLLVMIntrinsicCallOp OpSerializer::serializeLLVMIntrinsicCallOp(cir::LLVMIntrinsicCallOp op) {
  CIRLLVMIntrinsicCallOp serialized;

  for (auto v : op.getArgOps()) {
    auto protoV = serialized.add_arg_ops();
    *protoV = serializeValue(v);
  }

  *serialized.mutable_intrinsic_name() = attributeSerializer.serializeMLIRStringAttr(op.getIntrinsicNameAttr());

  if (op.getResult()) {
    *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());
  }

  return serialized;
}

CIRLLrintOp OpSerializer::serializeLLrintOp(cir::LLrintOp op) {
  CIRLLrintOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLLroundOp OpSerializer::serializeLLroundOp(cir::LLroundOp op) {
  CIRLLroundOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLabelOp OpSerializer::serializeLabelOp(cir::LabelOp op) {
  CIRLabelOp serialized;

  *serialized.mutable_label() = attributeSerializer.serializeMLIRStringAttr(op.getLabelAttr());

  return serialized;
}

CIRLoadOp OpSerializer::serializeLoadOp(cir::LoadOp op) {
  CIRLoadOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());

  if (op.getIsDerefAttr()) {
    *serialized.mutable_is_deref() = attributeSerializer.serializeMLIRUnitAttr(op.getIsDerefAttr());
  }
  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }
  if (op.getAlignmentAttr()) {
    *serialized.mutable_alignment() = attributeSerializer.serializeMLIRIntegerAttr(op.getAlignmentAttr());
  }
  if (op.getMemOrder()) {
    serialized.set_mem_order(serializeCIRMemOrder(*op.getMemOrder()));
  }
  if (op.getTbaaAttr()) {
    *serialized.mutable_tbaa() = attributeSerializer.serializeMLIRArrayAttr(op.getTbaaAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLog10Op OpSerializer::serializeLog10Op(cir::Log10Op op) {
  CIRLog10Op serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLog2Op OpSerializer::serializeLog2Op(cir::Log2Op op) {
  CIRLog2Op serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLogOp OpSerializer::serializeLogOp(cir::LogOp op) {
  CIRLogOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLrintOp OpSerializer::serializeLrintOp(cir::LrintOp op) {
  CIRLrintOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRLroundOp OpSerializer::serializeLroundOp(cir::LroundOp op) {
  CIRLroundOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRMemChrOp OpSerializer::serializeMemChrOp(cir::MemChrOp op) {
  CIRMemChrOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());
  *serialized.mutable_pattern() = serializeValue(op.getPattern());
  *serialized.mutable_len() = serializeValue(op.getLen());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRMemCpyInlineOp OpSerializer::serializeMemCpyInlineOp(cir::MemCpyInlineOp op) {
  CIRMemCpyInlineOp serialized;

  *serialized.mutable_dst() = serializeValue(op.getDst());
  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_len() = attributeSerializer.serializeMLIRIntegerAttr(op.getLenAttr());

  return serialized;
}

CIRMemCpyOp OpSerializer::serializeMemCpyOp(cir::MemCpyOp op) {
  CIRMemCpyOp serialized;

  *serialized.mutable_dst() = serializeValue(op.getDst());
  *serialized.mutable_src() = serializeValue(op.getSrc());
  *serialized.mutable_len() = serializeValue(op.getLen());

  return serialized;
}

CIRMemMoveOp OpSerializer::serializeMemMoveOp(cir::MemMoveOp op) {
  CIRMemMoveOp serialized;

  *serialized.mutable_dst() = serializeValue(op.getDst());
  *serialized.mutable_src() = serializeValue(op.getSrc());
  *serialized.mutable_len() = serializeValue(op.getLen());

  return serialized;
}

CIRMemSetInlineOp OpSerializer::serializeMemSetInlineOp(cir::MemSetInlineOp op) {
  CIRMemSetInlineOp serialized;

  *serialized.mutable_dst() = serializeValue(op.getDst());
  *serialized.mutable_val() = serializeValue(op.getVal());

  *serialized.mutable_len() = attributeSerializer.serializeMLIRIntegerAttr(op.getLenAttr());

  return serialized;
}

CIRMemSetOp OpSerializer::serializeMemSetOp(cir::MemSetOp op) {
  CIRMemSetOp serialized;

  *serialized.mutable_dst() = serializeValue(op.getDst());
  *serialized.mutable_val() = serializeValue(op.getVal());
  *serialized.mutable_len() = serializeValue(op.getLen());

  return serialized;
}

CIRNearbyintOp OpSerializer::serializeNearbyintOp(cir::NearbyintOp op) {
  CIRNearbyintOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRObjSizeOp OpSerializer::serializeObjSizeOp(cir::ObjSizeOp op) {
  CIRObjSizeOp serialized;

  *serialized.mutable_ptr() = serializeValue(op.getPtr());

  serialized.set_kind(serializeCIRSizeInfoType(op.getKind()));
  if (op.getDynamicAttr()) {
    *serialized.mutable_dynamic() = attributeSerializer.serializeMLIRUnitAttr(op.getDynamicAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRPowOp OpSerializer::serializePowOp(cir::PowOp op) {
  CIRPowOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRPrefetchOp OpSerializer::serializePrefetchOp(cir::PrefetchOp op) {
  CIRPrefetchOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());

  *serialized.mutable_locality() = attributeSerializer.serializeMLIRIntegerAttr(op.getLocalityAttr());
  if (op.getIsWriteAttr()) {
    *serialized.mutable_is_write() = attributeSerializer.serializeMLIRUnitAttr(op.getIsWriteAttr());
  }

  return serialized;
}

CIRPtrDiffOp OpSerializer::serializePtrDiffOp(cir::PtrDiffOp op) {
  CIRPtrDiffOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRPtrMaskOp OpSerializer::serializePtrMaskOp(cir::PtrMaskOp op) {
  CIRPtrMaskOp serialized;

  *serialized.mutable_ptr() = serializeValue(op.getPtr());
  *serialized.mutable_mask() = serializeValue(op.getMask());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRPtrStrideOp OpSerializer::serializePtrStrideOp(cir::PtrStrideOp op) {
  CIRPtrStrideOp serialized;

  *serialized.mutable_base() = serializeValue(op.getBase());
  *serialized.mutable_stride() = serializeValue(op.getStride());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRResumeOp OpSerializer::serializeResumeOp(cir::ResumeOp op) {
  CIRResumeOp serialized;

  if (op.getExceptionPtr()) {
    *serialized.mutable_exception_ptr() = serializeValue(op.getExceptionPtr());
  }
  if (op.getTypeId()) {
    *serialized.mutable_type_id() = serializeValue(op.getTypeId());
  }

  if (op.getRethrowAttr()) {
    *serialized.mutable_rethrow() = attributeSerializer.serializeMLIRUnitAttr(op.getRethrowAttr());
  }

  return serialized;
}

CIRReturnAddrOp OpSerializer::serializeReturnAddrOp(cir::ReturnAddrOp op) {
  CIRReturnAddrOp serialized;

  *serialized.mutable_level() = serializeValue(op.getLevel());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRReturnOp OpSerializer::serializeReturnOp(cir::ReturnOp op) {
  CIRReturnOp serialized;

  for (auto v : op.getInput()) {
    auto protoV = serialized.add_input();
    *protoV = serializeValue(v);
  }

  return serialized;
}

CIRRintOp OpSerializer::serializeRintOp(cir::RintOp op) {
  CIRRintOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRRotateOp OpSerializer::serializeRotateOp(cir::RotateOp op) {
  CIRRotateOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());
  *serialized.mutable_amt() = serializeValue(op.getAmt());

  if (op.getLeftAttr()) {
    *serialized.mutable_left() = attributeSerializer.serializeMLIRUnitAttr(op.getLeftAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRRoundOp OpSerializer::serializeRoundOp(cir::RoundOp op) {
  CIRRoundOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRScopeOp OpSerializer::serializeScopeOp(cir::ScopeOp op) {
  CIRScopeOp serialized;

  if (op.getResults()) {
    *serialized.mutable_results() = typeCache.getMLIRTypeID(op.getResults().getType());
  }

  return serialized;
}

CIRSelectOp OpSerializer::serializeSelectOp(cir::SelectOp op) {
  CIRSelectOp serialized;

  *serialized.mutable_condition() = serializeValue(op.getCondition());
  *serialized.mutable_true_value() = serializeValue(op.getTrueValue());
  *serialized.mutable_false_value() = serializeValue(op.getFalseValue());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRSetBitfieldOp OpSerializer::serializeSetBitfieldOp(cir::SetBitfieldOp op) {
  CIRSetBitfieldOp serialized;

  *serialized.mutable_addr() = serializeValue(op.getAddr());
  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_bitfield_info() = attributeSerializer.serializeCIRBitfieldInfoAttr(op.getBitfieldInfoAttr());
  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRShiftOp OpSerializer::serializeShiftOp(cir::ShiftOp op) {
  CIRShiftOp serialized;

  *serialized.mutable_value() = serializeValue(op.getValue());
  *serialized.mutable_amount() = serializeValue(op.getAmount());

  if (op.getIsShiftleftAttr()) {
    *serialized.mutable_is_shiftleft() = attributeSerializer.serializeMLIRUnitAttr(op.getIsShiftleftAttr());
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRSignBitOp OpSerializer::serializeSignBitOp(cir::SignBitOp op) {
  CIRSignBitOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  *serialized.mutable_res() = typeCache.getMLIRTypeID(op.getRes().getType());

  return serialized;
}

CIRSinOp OpSerializer::serializeSinOp(cir::SinOp op) {
  CIRSinOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRSqrtOp OpSerializer::serializeSqrtOp(cir::SqrtOp op) {
  CIRSqrtOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRStackRestoreOp OpSerializer::serializeStackRestoreOp(cir::StackRestoreOp op) {
  CIRStackRestoreOp serialized;

  *serialized.mutable_ptr() = serializeValue(op.getPtr());

  return serialized;
}

CIRStackSaveOp OpSerializer::serializeStackSaveOp(cir::StackSaveOp op) {
  CIRStackSaveOp serialized;

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRStdFindOp OpSerializer::serializeStdFindOp(cir::StdFindOp op) {
  CIRStdFindOp serialized;

  *serialized.mutable_first() = serializeValue(op.getFirst());
  *serialized.mutable_last() = serializeValue(op.getLast());
  *serialized.mutable_pattern() = serializeValue(op.getPattern());

  *serialized.mutable_original_fn() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getOriginalFnAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRStdInitializerListOp OpSerializer::serializeStdInitializerListOp(cir::StdInitializerListOp op) {
  CIRStdInitializerListOp serialized;

  *serialized.mutable_init_list() = serializeValue(op.getInitList());
  for (auto v : op.getArgs()) {
    auto protoV = serialized.add_args();
    *protoV = serializeValue(v);
  }

  return serialized;
}

CIRStoreOp OpSerializer::serializeStoreOp(cir::StoreOp op) {
  CIRStoreOp serialized;

  *serialized.mutable_value() = serializeValue(op.getValue());
  *serialized.mutable_addr() = serializeValue(op.getAddr());

  if (op.getIsVolatileAttr()) {
    *serialized.mutable_is_volatile() = attributeSerializer.serializeMLIRUnitAttr(op.getIsVolatileAttr());
  }
  if (op.getAlignmentAttr()) {
    *serialized.mutable_alignment() = attributeSerializer.serializeMLIRIntegerAttr(op.getAlignmentAttr());
  }
  if (op.getMemOrder()) {
    serialized.set_mem_order(serializeCIRMemOrder(*op.getMemOrder()));
  }
  if (op.getTbaaAttr()) {
    *serialized.mutable_tbaa() = attributeSerializer.serializeMLIRArrayAttr(op.getTbaaAttr());
  }

  return serialized;
}

CIRSwitchFlatOp OpSerializer::serializeSwitchFlatOp(cir::SwitchFlatOp op) {
  CIRSwitchFlatOp serialized;

  *serialized.mutable_condition() = serializeValue(op.getCondition());
  for (auto v : op.getDefaultOperands()) {
    auto protoV = serialized.add_default_operands();
    *protoV = serializeValue(v);
  }
  for (auto v : op.getCaseOperands()) {
    auto protoV = serialized.add_case_operands();
    for (auto vv : v) {
      auto protoVV = protoV->add_list();
      *protoVV = serializeValue(vv);
    }
  }

  *serialized.mutable_case_values() = attributeSerializer.serializeMLIRArrayAttr(op.getCaseValuesAttr());
  *serialized.mutable_case_operand_segments() = attributeSerializer.serializeMLIRDenseI32ArrayAttr(op.getCaseOperandSegmentsAttr());

  *serialized.mutable_default_destination() = blockCache.getMLIRBlockID(op.getDefaultDestination());
  for (auto s : op.getCaseDestinations()) {
    auto protoS = serialized.add_case_destinations();
    *protoS = blockCache.getMLIRBlockID(s);
  }

  return serialized;
}

CIRSwitchOp OpSerializer::serializeSwitchOp(cir::SwitchOp op) {
  CIRSwitchOp serialized;

  *serialized.mutable_condition() = serializeValue(op.getCondition());

  return serialized;
}

CIRTernaryOp OpSerializer::serializeTernaryOp(cir::TernaryOp op) {
  CIRTernaryOp serialized;

  *serialized.mutable_cond() = serializeValue(op.getCond());

  if (op.getResult()) {
    *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());
  }

  return serialized;
}

CIRThrowOp OpSerializer::serializeThrowOp(cir::ThrowOp op) {
  CIRThrowOp serialized;

  if (op.getExceptionPtr()) {
    *serialized.mutable_exception_ptr() = serializeValue(op.getExceptionPtr());
  }

  if (op.getTypeInfoAttr()) {
    *serialized.mutable_type_info() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getTypeInfoAttr());
  }
  if (op.getDtorAttr()) {
    *serialized.mutable_dtor() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getDtorAttr());
  }

  return serialized;
}

CIRTrapOp OpSerializer::serializeTrapOp(cir::TrapOp op) {
  CIRTrapOp serialized;

  return serialized;
}

CIRTruncOp OpSerializer::serializeTruncOp(cir::TruncOp op) {
  CIRTruncOp serialized;

  *serialized.mutable_src() = serializeValue(op.getSrc());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRTryCallOp OpSerializer::serializeTryCallOp(cir::TryCallOp op) {
  CIRTryCallOp serialized;

  for (auto v : op.getContOperands()) {
    auto protoV = serialized.add_cont_operands();
    *protoV = serializeValue(v);
  }
  for (auto v : op.getLandingPadOperands()) {
    auto protoV = serialized.add_landing_pad_operands();
    *protoV = serializeValue(v);
  }
  for (auto v : op.getArgOps()) {
    auto protoV = serialized.add_arg_ops();
    *protoV = serializeValue(v);
  }

  if (op.getCalleeAttr()) {
    *serialized.mutable_callee() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getCalleeAttr());
  }
  serialized.set_calling_conv(serializeCIRCallingConv(op.getCallingConv()));
  *serialized.mutable_extra_attrs() = attributeSerializer.serializeCIRExtraFuncAttributesAttr(op.getExtraAttrsAttr());

  *serialized.mutable_cont() = blockCache.getMLIRBlockID(op.getCont());
  *serialized.mutable_landing_pad() = blockCache.getMLIRBlockID(op.getLandingPad());

  if (op.getResult()) {
    *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());
  }

  return serialized;
}

CIRTryOp OpSerializer::serializeTryOp(cir::TryOp op) {
  CIRTryOp serialized;

  if (op.getSyntheticAttr()) {
    *serialized.mutable_synthetic() = attributeSerializer.serializeMLIRUnitAttr(op.getSyntheticAttr());
  }
  if (op.getCleanupAttr()) {
    *serialized.mutable_cleanup() = attributeSerializer.serializeMLIRUnitAttr(op.getCleanupAttr());
  }
  if (op.getCatchTypesAttr()) {
    *serialized.mutable_catch_types() = attributeSerializer.serializeMLIRArrayAttr(op.getCatchTypesAttr());
  }

  return serialized;
}

CIRUnaryOp OpSerializer::serializeUnaryOp(cir::UnaryOp op) {
  CIRUnaryOp serialized;

  *serialized.mutable_input() = serializeValue(op.getInput());

  serialized.set_kind(serializeCIRUnaryOpKind(op.getKind()));

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRUnreachableOp OpSerializer::serializeUnreachableOp(cir::UnreachableOp op) {
  CIRUnreachableOp serialized;

  return serialized;
}

CIRVAArgOp OpSerializer::serializeVAArgOp(cir::VAArgOp op) {
  CIRVAArgOp serialized;

  *serialized.mutable_arg_list() = serializeValue(op.getArgList());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVACopyOp OpSerializer::serializeVACopyOp(cir::VACopyOp op) {
  CIRVACopyOp serialized;

  *serialized.mutable_dst_list() = serializeValue(op.getDstList());
  *serialized.mutable_src_list() = serializeValue(op.getSrcList());

  return serialized;
}

CIRVAEndOp OpSerializer::serializeVAEndOp(cir::VAEndOp op) {
  CIRVAEndOp serialized;

  *serialized.mutable_arg_list() = serializeValue(op.getArgList());

  return serialized;
}

CIRVAStartOp OpSerializer::serializeVAStartOp(cir::VAStartOp op) {
  CIRVAStartOp serialized;

  *serialized.mutable_arg_list() = serializeValue(op.getArgList());

  return serialized;
}

CIRVTTAddrPointOp OpSerializer::serializeVTTAddrPointOp(cir::VTTAddrPointOp op) {
  CIRVTTAddrPointOp serialized;

  if (op.getSymAddr()) {
    *serialized.mutable_sym_addr() = serializeValue(op.getSymAddr());
  }

  if (op.getNameAttr()) {
    *serialized.mutable_name() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getNameAttr());
  }
  *serialized.mutable_offset() = attributeSerializer.serializeMLIRIntegerAttr(op.getOffsetAttr());

  *serialized.mutable_addr() = typeCache.getMLIRTypeID(op.getAddr().getType());

  return serialized;
}

CIRVTableAddrPointOp OpSerializer::serializeVTableAddrPointOp(cir::VTableAddrPointOp op) {
  CIRVTableAddrPointOp serialized;

  if (op.getSymAddr()) {
    *serialized.mutable_sym_addr() = serializeValue(op.getSymAddr());
  }

  if (op.getNameAttr()) {
    *serialized.mutable_name() = attributeSerializer.serializeMLIRFlatSymbolRefAttr(op.getNameAttr());
  }
  *serialized.mutable_vtable_index() = attributeSerializer.serializeMLIRIntegerAttr(op.getVtableIndexAttr());
  *serialized.mutable_address_point_index() = attributeSerializer.serializeMLIRIntegerAttr(op.getAddressPointIndexAttr());

  *serialized.mutable_addr() = typeCache.getMLIRTypeID(op.getAddr().getType());

  return serialized;
}

CIRVecCmpOp OpSerializer::serializeVecCmpOp(cir::VecCmpOp op) {
  CIRVecCmpOp serialized;

  *serialized.mutable_lhs() = serializeValue(op.getLhs());
  *serialized.mutable_rhs() = serializeValue(op.getRhs());

  serialized.set_kind(serializeCIRCmpOpKind(op.getKind()));

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVecCreateOp OpSerializer::serializeVecCreateOp(cir::VecCreateOp op) {
  CIRVecCreateOp serialized;

  for (auto v : op.getElements()) {
    auto protoV = serialized.add_elements();
    *protoV = serializeValue(v);
  }

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVecExtractOp OpSerializer::serializeVecExtractOp(cir::VecExtractOp op) {
  CIRVecExtractOp serialized;

  *serialized.mutable_vec() = serializeValue(op.getVec());
  *serialized.mutable_index() = serializeValue(op.getIndex());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVecInsertOp OpSerializer::serializeVecInsertOp(cir::VecInsertOp op) {
  CIRVecInsertOp serialized;

  *serialized.mutable_vec() = serializeValue(op.getVec());
  *serialized.mutable_value() = serializeValue(op.getValue());
  *serialized.mutable_index() = serializeValue(op.getIndex());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVecShuffleDynamicOp OpSerializer::serializeVecShuffleDynamicOp(cir::VecShuffleDynamicOp op) {
  CIRVecShuffleDynamicOp serialized;

  *serialized.mutable_vec() = serializeValue(op.getVec());
  *serialized.mutable_indices() = serializeValue(op.getIndices());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVecShuffleOp OpSerializer::serializeVecShuffleOp(cir::VecShuffleOp op) {
  CIRVecShuffleOp serialized;

  *serialized.mutable_vec1() = serializeValue(op.getVec1());
  *serialized.mutable_vec2() = serializeValue(op.getVec2());

  *serialized.mutable_indices() = attributeSerializer.serializeMLIRArrayAttr(op.getIndicesAttr());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVecSplatOp OpSerializer::serializeVecSplatOp(cir::VecSplatOp op) {
  CIRVecSplatOp serialized;

  *serialized.mutable_value() = serializeValue(op.getValue());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRVecTernaryOp OpSerializer::serializeVecTernaryOp(cir::VecTernaryOp op) {
  CIRVecTernaryOp serialized;

  *serialized.mutable_cond() = serializeValue(op.getCond());
  *serialized.mutable_vec1() = serializeValue(op.getVec1());
  *serialized.mutable_vec2() = serializeValue(op.getVec2());

  *serialized.mutable_result() = typeCache.getMLIRTypeID(op.getResult().getType());

  return serialized;
}

CIRWhileOp OpSerializer::serializeWhileOp(cir::WhileOp op) {
  CIRWhileOp serialized;

  return serialized;
}

CIRYieldOp OpSerializer::serializeYieldOp(cir::YieldOp op) {
  CIRYieldOp serialized;

  for (auto v : op.getArgs()) {
    auto protoV = serialized.add_args();
    *protoV = serializeValue(v);
  }

  return serialized;
}

MLIRValue OpSerializer::serializeValue(mlir::Value value) {
  MLIRValue pValue;
  auto typeID = typeCache.getMLIRTypeID(value.getType());
  *pValue.mutable_type() = typeID;

  llvm::TypeSwitch<mlir::Value>(value)
      .Case<mlir::OpResult>([this, &pValue](mlir::OpResult value) {
        MLIROpResult opResult;
        *opResult.mutable_owner() = opCache.getMLIROpID(value.getOwner());
        opResult.set_result_number(value.getResultNumber());
        *pValue.mutable_op_result() = opResult;
      })
      .Case<mlir::BlockArgument>([this, &pValue](mlir::BlockArgument value) {
        MLIRBlockArgument blockArgument;
        *blockArgument.mutable_owner() =
            blockCache.getMLIRBlockID(value.getOwner());
        blockArgument.set_arg_number(value.getArgNumber());
        *pValue.mutable_block_argument() = blockArgument;
      })
      .Default([](mlir::Value value) {
        value.dump();
        llvm_unreachable("Unknown value during serialization");
      });
  return pValue;
}

// clang-format on
